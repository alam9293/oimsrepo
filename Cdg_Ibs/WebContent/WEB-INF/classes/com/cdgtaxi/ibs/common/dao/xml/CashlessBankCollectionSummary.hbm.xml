<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="cashlessBankCollectionSummary">
	<return-scalar column="name" 			type="string"/>
	<return-scalar column="batch_date"		type="string"/>
	<return-scalar column="batch_no"		type="string"/>
	<return-scalar column="total_records"	type="string"/>
	<return-scalar column="total_amt"		type="string"/>
	<return-scalar column="credit_date"		type="string"/>
	<return-scalar column="credit_record"	type="string"/>
	<return-scalar column="credit_amt"		type="string"/>
	<return-scalar column="mdr"				type="string"/>
	<return-scalar column="mdr_percent"		type="string"/>
	<return-scalar column="net_amt"			type="string"/>
	<return-scalar column="reject_records"	type="string"/>
	<return-scalar column="reject_amt"		type="string"/>
	<return-scalar column="os_amt"			type="string"/>
	<return-scalar column="commission_amt"		type="string"/>
	<![CDATA[
	select acquirer.NAME,
	to_char(batch.SETTLEMENT_DATE, 'dd/mm/yyyy') as batch_date,
	batch.BATCH_NO, count(txn.TXN_ID) as total_records, sum(txn.TOTAL) as total_amt,
	to_char(pymt.CREDIT_DATE, 'dd/mm/yyyy') as CREDIT_DATE,
    trim(to_char(count(txn.TXN_ID) - count(case when txn.STATUS = 'R' then txn.TXN_ID when batch.STATUS = 'O' then txn.TXN_ID else null end), '999,999,990')) as credit_record,
    trim(to_char(sum(case when txn.STATUS = 'R' then 0 when batch.STATUS = 'O' then 0 else txn.total end), '999,999,990.00')) as credit_amt,
    trim(to_char(round(avg(nvl(pymt.MDR_PERCENTAGE, 0)) * 0.01 * sum(case when txn.STATUS = 'C' and batch.STATUS <> 'O' then txn.total else 0 end), 2), '999,999,990.00')) as mdr,
    trim(to_char(avg(nvl(pymt.MDR_PERCENTAGE, 0)), '999,999,990.00')) as mdr_percent,
    trim(to_char(sum(case when txn.STATUS = 'R' then 0 when batch.STATUS = 'O' then 0 else txn.total end) - round(avg(nvl(pymt.MDR_PERCENTAGE, 0)) * 0.01 * sum(case when txn.STATUS = 'C' and batch.STATUS <> 'O' then txn.total else 0 end), 2), '999,999,990.00')) as net_amt,
    trim(to_char(count(case when txn.STATUS = 'R' then txn.TXN_ID else null end), '999,999,990')) as reject_records,
    trim(to_char(sum(case when txn.STATUS = 'R' then txn.total else 0 end), '999,999,990.00')) as reject_amt,
    trim(to_char(sum(txn.TOTAL) - (sum(case when txn.STATUS = 'R' then 0 else txn.total end)) - sum(case when txn.STATUS = 'R' then txn.total else 0 end), '999,999,990.00')) as os_amt,
	trim(to_char(sum(nvl(txn.COMMISSION_AMT, 0)), '999,999,990.00')) as commission_amt
    from TMTB_NON_BILLABLE_TXN txn
    inner join TMTB_NON_BILLABLE_BATCH batch on txn.BATCH_ID = batch.BATCH_ID
    inner join MSTB_ACQUIRER acquirer on batch.ACQUIRER_NO = acquirer.ACQUIRER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    left join (select distinct BATCH_ID, PAYMENT_NO from BMTB_BANK_PAYMENT_DETAIL) pymt_detail on pymt_detail.BATCH_ID = batch.BATCH_ID
    left join BMTB_BANK_PAYMENT pymt on pymt_detail.PAYMENT_NO = pymt.PAYMENT_NO
    where (:batchNo is null or batch.BATCH_NO = :batchNo)
    and ((:creditStart is null and :creditEnd is null)or(pymt.CREDIT_DATE between case when :creditStart is null then to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :creditEnd is null then to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and ((:batchStart is null and :batchEnd is null)or(batch.SETTLEMENT_DATE between case when :batchStart is null then to_date(:batchEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:batchStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :batchEnd is null then to_date(:batchStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:batchEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entityNo is null or entity.ENTITY_NO = :entityNo)
    and (:acquirerNo is null or acquirer.ACQUIRER_NO = :acquirerNo)
    and (:paymentTypeNo is null or pymt_type_master.MASTER_CODE = :paymentTypeNo)
    and (:providerNo is null or provider.MASTER_CODE = :providerNo)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
    group by acquirer.NAME, batch.SETTLEMENT_DATE, batch.BATCH_NO, pymt.CREDIT_DATE
    order by acquirer.NAME, batch.SETTLEMENT_DATE, batch.BATCH_NO
	]]>
</sql-query>
</hibernate-mapping>