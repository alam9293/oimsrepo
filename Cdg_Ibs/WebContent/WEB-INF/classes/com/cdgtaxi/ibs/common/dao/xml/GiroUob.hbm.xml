<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="getNetAmount">
	<return-scalar column="net_amount" type="java.math.BigDecimal"/>
	<![CDATA[
		select NVL(sum(h.outstanding_amount),0) as net_amount
		from bmtb_invoice_header h
		where
	  		h.account_no in (
	    		select account_no
	    		from amtb_account
	    		where account_no = :accountNo
	    		union
	    		select account_no
	    		from amtb_account
	    		where parent_no = :accountNo
	    		UNION
	    		select a1.account_no
	    		from amtb_account a1
	    		inner join amtb_account a2 on a1.parent_no = a2.account_no
	    		where a2.parent_no = :accountNo
	  		)
	]]>
</sql-query>

<sql-query name="getTopLevelAccountInfo">
	<![CDATA[
		select 
			bank.BANK_CODE as BANK_CODE,
			branch.BRANCH_CODE as BRANCH_CODE,
			acct.BANK_ACCT_NO,
			SUBSTR(UPPER(acct.NAME_ON_CARD),0,20),
			acct.CUST_NO
		from AMTB_ACCOUNT acct
		left join MSTB_BANK_MASTER bank on acct.BANK_MASTER_NO = bank.BANK_MASTER_NO
		left join MSTB_BRANCH_MASTER branch on acct.BRANCH_MASTER_NO = branch.BRANCH_MASTER_NO
		where
			exists (
				select 
					top_level.ACCOUNT_NO
				from AMTB_ACCOUNT top_level
				left join AMTB_ACCOUNT second_level on top_level.ACCOUNT_NO = second_level.PARENT_NO
				left join AMTB_ACCOUNT third_level on second_level.ACCOUNT_NO = third_level.PARENT_NO
				where
					top_level.CUST_NO is not null
					AND acct.ACCOUNT_NO = top_level.ACCOUNT_NO
					AND (
						top_level.ACCOUNT_NO = :accountNo
						OR
						second_level.ACCOUNT_NO = :accountNo
						or
						third_level.ACCOUNT_NO = :accountNo
					)	
			)
	]]>
</sql-query>

</hibernate-mapping>