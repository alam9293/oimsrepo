<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="corporateCustomerUsageBreakdown">
	<return-scalar column="CUST_NO" 				type="string"/>
	<return-scalar column="ACCOUNT_NAME" 			type="string"/>
	<return-scalar column="current_month_sum" 		type="string"/>
	<return-scalar column="previous_month_sum" 		type="string"/>
	<return-scalar column="previous2_month_sum" 	type="string"/>
	
	<![CDATA[
	SELECT 
		main.CUST_NO,
		main.ACCOUNT_NAME,
		(
			CASE
				WHEN current_sum.amount IS NULL THEN 0
				ELSE current_sum.amount
			END
		) AS current_month_sum,
		(
			CASE
				WHEN previous_sum.amount IS NULL THEN 0
				ELSE previous_sum.amount
			END
		) AS previous_month_sum,
		(
			CASE
				WHEN previous2_sum.amount IS NULL THEN 0
				ELSE previous2_sum.amount
			END
		) AS previous2_month_sum
	FROM AMTB_ACCOUNT main
	INNER JOIN AMTB_ACCOUNT acct ON main.ACCOUNT_NO = acct.ACCOUNT_NO
	LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
	LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
	LEFT JOIN AMTB_ACCOUNT top ON top.account_no =
	(CASE WHEN grand.account_no IS NOT NULL THEN grand.account_no WHEN parent.account_no IS NOT NULL THEN parent.account_no ELSE acct.account_no END)
	inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
	inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),0)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),0))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) current_sum ON current_sum.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-1)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-1))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) previous_sum ON previous_sum.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-2)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-2))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) previous2_sum ON previous2_sum.ACCOUNT_NO = main.ACCOUNT_NO
	INNER JOIN AMTB_SUBSC_TO subscribe_prod_type ON subscribe_prod_type.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT DISTINCT account_no, 
		first_value(ACCT_STATUS) OVER (PARTITION BY account_no ORDER BY EFFECTIVE_DT DESC) AS account_status
	FROM AMTB_ACCT_STATUS) acct_status_tbl ON acct_status_tbl.account_no = main.ACCOUNT_NO
	LEFT JOIN AMTB_CORPORATE_DETAIL corp_biz ON corp_biz.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN MSTB_MASTER_TABLE biz_nature ON biz_nature.MASTER_NO=corp_biz.INDUSTRY
	LEFT JOIN (
		SELECT account_no, MAX(ACCT_SALESPERSON_NO) AS ACCT_SALESPERSON_NO
		FROM AMTB_ACCT_SALESPERSON
		WHERE trunc(sysdate) >= EFFECTIVE_DT_FROM
	    	AND (trunc(sysdate) <= EFFECTIVE_DT_TO OR EFFECTIVE_DT_TO IS NULL)
		GROUP BY account_no
	) latest_acct_sales ON latest_acct_sales.account_no = main.account_no
	LEFT JOIN AMTB_ACCT_SALESPERSON acct_sales ON acct_sales.ACCT_SALESPERSON_NO = latest_acct_sales.ACCT_SALESPERSON_NO
	LEFT JOIN MSTB_SALESPERSON sales ON acct_sales.salesperson_no = sales.salesperson_no
	 WHERE main.CUST_NO IS NOT NULL 
	AND
	    (:productType IS NULL
	    OR subscribe_prod_type.PRODUCT_TYPE_ID LIKE :productType)
	AND
	    (:accountStatus IS NULL
	    OR acct_status_tbl.account_status LIKE :accountStatus)
	AND
	    (:businessNature IS NULL
	    OR biz_nature.MASTER_CODE LIKE :businessNature)    
	AND
		(:salesPerson IS NULL
		OR sales.salesperson_no = :salesPerson)
	AND (:entityNo is null OR entity.ENTITY_NO = :entityNo)
	ORDER BY
		CASE WHEN :sortBy = 'IA' THEN current_month_sum END DESC
	]]>
</sql-query>

<sql-query name="corporateCustomerUsageBreakdownLimit">
	<return-scalar column="CUST_NO" 				type="string"/>
	<return-scalar column="ACCOUNT_NAME" 			type="string"/>
	<return-scalar column="current_month_sum" 		type="string"/>
	<return-scalar column="previous_month_sum" 		type="string"/>
	<return-scalar column="previous2_month_sum" 	type="string"/>
	
	<![CDATA[
	SELECT * FROM(
	SELECT 
		main.CUST_NO,
		main.ACCOUNT_NAME,
		(
			CASE
				WHEN current_sum.amount IS NULL THEN 0
				ELSE current_sum.amount
			END
		) AS current_month_sum,
		(
			CASE
				WHEN previous_sum.amount IS NULL THEN 0
				ELSE previous_sum.amount
			END
		) AS previous_month_sum,
		(
			CASE
				WHEN previous2_sum.amount IS NULL THEN 0
				ELSE previous2_sum.amount
			END
		) AS previous2_month_sum
	FROM AMTB_ACCOUNT main
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),0)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),0))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) current_sum ON current_sum.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-1)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-1))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) previous_sum ON previous_sum.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT top.ACCOUNT_NO,SUM(header.NEW_TXN) AS amount FROM BMTB_INVOICE_HEADER header
			INNER JOIN AMTB_ACCOUNT acct ON header.ACCOUNT_NO = acct.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT parent ON acct.PARENT_NO = parent.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT grand ON parent.PARENT_NO = grand.ACCOUNT_NO
			LEFT JOIN AMTB_ACCOUNT top ON top.account_no = (
				CASE 
					WHEN grand.account_no IS NOT NULL THEN grand.account_no
					WHEN parent.account_no IS NOT NULL THEN parent.account_no
					ELSE acct.account_no 
				END
			)
			inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
   			inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
			WHERE header.NEW_TXN<>0
			AND header.INVOICE_DATE BETWEEN 
				TRUNC (TO_DATE (ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-2)), 'MONTH')
				AND 
				LAST_DAY(ADD_MONTHS(to_date(:invoiceMonth, 'yyyy-mm-dd hh24:mi:ss'),-2))
			and (:entityNo is null or entity.ENTITY_NO = :entityNo)
			GROUP BY top.ACCOUNT_NO
	) previous2_sum ON previous2_sum.ACCOUNT_NO = main.ACCOUNT_NO
	INNER JOIN AMTB_SUBSC_TO subscribe_prod_type ON subscribe_prod_type.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN (
		SELECT DISTINCT account_no, 
		first_value(ACCT_STATUS) OVER (PARTITION BY account_no ORDER BY EFFECTIVE_DT DESC) AS account_status
	FROM AMTB_ACCT_STATUS) acct_status_tbl ON acct_status_tbl.account_no = main.ACCOUNT_NO
	LEFT JOIN AMTB_CORPORATE_DETAIL corp_biz ON corp_biz.ACCOUNT_NO = main.ACCOUNT_NO
	LEFT JOIN MSTB_MASTER_TABLE biz_nature ON biz_nature.MASTER_NO=corp_biz.INDUSTRY
	LEFT JOIN (
		SELECT account_no, MAX(ACCT_SALESPERSON_NO) AS ACCT_SALESPERSON_NO
		FROM AMTB_ACCT_SALESPERSON
		WHERE trunc(sysdate) >= EFFECTIVE_DT_FROM
	    	AND (trunc(sysdate) <= EFFECTIVE_DT_TO OR EFFECTIVE_DT_TO IS NULL)
		GROUP BY account_no
	) latest_acct_sales ON latest_acct_sales.account_no = main.account_no
	LEFT JOIN AMTB_ACCT_SALESPERSON acct_sales ON acct_sales.ACCT_SALESPERSON_NO = latest_acct_sales.ACCT_SALESPERSON_NO
	LEFT JOIN MSTB_SALESPERSON sales ON acct_sales.salesperson_no = sales.salesperson_no
	 WHERE main.CUST_NO IS NOT NULL 
	AND
	    (:productType IS NULL
	    OR subscribe_prod_type.PRODUCT_TYPE_ID LIKE :productType)
	AND
	    (:accountStatus IS NULL
	    OR acct_status_tbl.account_status LIKE :accountStatus)
	AND
	    (:businessNature IS NULL
	    OR biz_nature.MASTER_CODE LIKE :businessNature)    
	AND
		(:salesPerson IS NULL
		OR sales.salesperson_no = :salesPerson)
	ORDER BY
		CASE WHEN :sortBy = 'IA' THEN current_month_sum END DESC
	)WHERE rownum <= case when :numberOfRecords is not null then :numberOfRecords else '9999999' end
	]]>
</sql-query>

</hibernate-mapping>