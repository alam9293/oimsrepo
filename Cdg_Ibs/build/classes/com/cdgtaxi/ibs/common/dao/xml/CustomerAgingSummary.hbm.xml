<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="customerAgingSummary">
	<return-scalar column="customer_id" 			type="string"/>
	<return-scalar column="CUSTOMER_NAME" 			type="string"/>
	<return-scalar column="account_category" 		type="string"/>
	<return-scalar column="OUTSTANDING_AMOUNT"		type="string"/>
	<return-scalar column="LESS_0_DAYS" 			type="string"/>
	<return-scalar column="LESS_30_DAYS" 			type="string"/>
	<return-scalar column="LESS_60_DAYS" 			type="string"/>
	<return-scalar column="LESS_90_DAYS" 			type="string"/>
	<return-scalar column="LESS_120_DAYS" 			type="string"/>
	<return-scalar column="LESS_150_DAYS" 			type="string"/>
	<return-scalar column="LESS_180_DAYS" 			type="string"/>
	<return-scalar column="LESS_210_DAYS" 			type="string"/>
	<return-scalar column="LESS_360_DAYS" 			type="string"/>
	<return-scalar column="MORE_360_DAYS" 			type="string"/>
	<return-scalar column="TURNOVER" 				type="string"/>
	<return-scalar column="INDUSTRY" 				type="string"/>
	<return-scalar column="SALES_PERSON" 			type="string"/>
	<return-scalar column="subscribed_product_type" type="string"/>

	<![CDATA[
	Select temp2.*,
	
	NVL(
		round(
	 		case
	 			when temp4.divisor is null then 0
	 			when temp4.divisor = 0 then 0
	 			else temp2.OUTSTANDING_AMOUNT / temp4.divisor
	 		end
		)
	, 0) 
	TURNOVER,
	
	subscribed.subscribed_product_type
	    
	from(
		Select
		  customer_id, CUSTOMER_NAME, account_category, INDUSTRY, SALES_PERSON,
		  sum(OUTSTANDING_AMOUNT) OUTSTANDING_AMOUNT,
		  sum(LESS_0_DAYS) LESS_0_DAYS,
		  sum(LESS_30_DAYS) LESS_30_DAYS,
		  sum(LESS_60_DAYS) LESS_60_DAYS,
		  sum(LESS_90_DAYS) LESS_90_DAYS,
		  sum(LESS_120_DAYS) LESS_120_DAYS,
		  sum(LESS_150_DAYS) LESS_150_DAYS,
		  sum(LESS_180_DAYS) LESS_180_DAYS,
		  sum(LESS_210_DAYS) LESS_210_DAYS,
		  sum(LESS_360_DAYS) LESS_360_DAYS,
		  sum(MORE_360_DAYS) MORE_360_DAYS
		from (
			select
			  case
			    when gp_acct.account_no is not null then gp_acct.cust_no
			    when p_acct.account_no is not null then p_acct.cust_no
			    else acct.cust_no
			  end CUSTOMER_ID,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_name
			    when p_acct.account_no is not null then p_acct.account_name
			    else acct.account_name
			  end CUSTOMER_NAME,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_category
			    when p_acct.account_no is not null then p_acct.account_category
			    else acct.account_category
			  end account_category,
			  bih.invoice_no REF_NO,
			  'INV' REF_TYPE,
			  case 
			    when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <=0 then 0
			    else round(trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE)))
			  end DAYS_LATE,
			  bih.outstanding_amount OUTSTANDING_AMOUNT,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 0 then bih.outstanding_amount else 0 end LESS_0_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >0 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 30 then bih.outstanding_amount else 0 end LESS_30_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >30 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 60 then bih.outstanding_amount else 0 end LESS_60_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >60 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 90 then bih.outstanding_amount else 0 end LESS_90_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >90 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 120 then bih.outstanding_amount else 0 end LESS_120_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >120 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 150 then bih.outstanding_amount else 0 end LESS_150_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >150 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 180 then bih.outstanding_amount else 0 end LESS_180_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >180 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 210 then bih.outstanding_amount else 0 end LESS_210_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >210 AND (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 360 then bih.outstanding_amount else 0 end LESS_360_DAYS,
			  case when (trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) >360 then bih.outstanding_amount else 0 end MORE_360_DAYS,
			case
			  when sales.name is not null then sales.name
			  when p_sales.name is not null then p_sales.name
			  when gp_sales.name is not null then gp_sales.name
			end SALES_PERSON,
			case
			  when acct_ind.master_no is not null then acct_ind.master_value
			  when p_acct_ind.master_no is not null then p_acct_ind.master_value
			  when gp_acct_ind.master_no is not null then gp_acct_ind.master_value
			  when pers_acct_ind.master_no is not null then pers_acct_ind.master_value
			end INDUSTRY
			from bmtb_invoice_header bih
			inner join amtb_account acct on bih.debt_to = acct.account_no
			left join amtb_account p_acct on acct.parent_no = p_acct.account_no
			left join amtb_account gp_acct on p_acct.parent_no = gp_acct.account_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) latest_acct_sales ON latest_acct_sales.account_no = acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON acct_sales ON acct_sales.ACCT_SALESPERSON_NO = latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON sales ON acct_sales.salesperson_no = sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) p_latest_acct_sales ON p_latest_acct_sales.account_no = p_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON p_acct_sales ON p_acct_sales.ACCT_SALESPERSON_NO = p_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON p_sales ON p_acct_sales.salesperson_no = p_sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) gp_latest_acct_sales ON gp_latest_acct_sales.account_no = gp_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON gp_acct_sales ON gp_acct_sales.ACCT_SALESPERSON_NO = gp_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON gp_sales ON gp_acct_sales.salesperson_no = gp_sales.salesperson_no
			LEFT JOIN AMTB_CORPORATE_DETAIL acct_det ON acct.account_no = acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL p_acct_det ON p_acct.account_no = p_acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL gp_acct_det ON gp_acct.account_no = gp_acct_det.account_no
			LEFT JOIN AMTB_PERSONAL_DETAIL pers_acct_det ON gp_acct.account_no = pers_acct_det.account_no
			LEFT JOIN MSTB_MASTER_TABLE acct_ind ON acct_det.industry = acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE p_acct_ind ON p_acct_det.industry = p_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE gp_acct_ind ON gp_acct_det.industry = gp_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE pers_acct_ind ON pers_acct_det.industry = pers_acct_ind.master_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER ar ON ar.AR_CONTROL_CODE_NO = acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER entity ON ar.entity_no = entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER p_ar ON p_ar.AR_CONTROL_CODE_NO = p_acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER p_entity ON p_ar.entity_no = p_entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER gp_ar ON gp_ar.AR_CONTROL_CODE_NO = gp_acct.AR_CONTROL_CODE_NO
		  	LEFT JOIN FMTB_ENTITY_MASTER gp_entity ON gp_ar.entity_no = gp_entity.entity_no
			WHERE
			  (
			    :accountNo is null
			    or
			    acct.cust_no = :accountNo
			    or
			    p_acct.cust_no = :accountNo
			    or
			    gp_acct.cust_no = :accountNo
			  )
			  AND
			  (
			    acct.account_name like :accountName
			    or
			    p_acct.account_name like :accountName
			    or
			    gp_acct.account_name like :accountName
			  )
			  AND
			  (
			    :entityNo is null
			    or
			    entity.entity_no = :entityNo
			    or
			    p_entity.entity_no = :entityNo
			    or
			    gp_entity.entity_no = :entityNo
			  )
			  AND
			  (
			    :arControlCodeNo is null
			    or
			    ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    p_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    gp_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			  )
			  AND
			  bih.OUTSTANDING_AMOUNT !=0
			  AND
			  (
			    :outstandingAmount is null	  
			    or
			    bih.OUTSTANDING_AMOUNT > :outstandingAmount
			  )
			  AND
			  case when round(trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) <= 0 then 0 else round(trunc(SYSDATE) - NVL(bih.DUE_DATE, trunc(SYSDATE))) end >= '0'
			  AND
			  (
			    :type is null
			    or
			    'I' = :type
			  )	  
		
			UNION ALL
		
			SELECT
			  case
			    when gp_acct.account_no is not null then gp_acct.cust_no
			    when p_acct.account_no is not null then p_acct.cust_no
			    else acct.cust_no
			  end CUSTOMER_ID,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_name
			    when p_acct.account_no is not null then p_acct.account_name
			    else acct.account_name
			  end CUSTOMER_NAME,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_category
			    when p_acct.account_no is not null then p_acct.account_category
			    else acct.account_category
			  end account_category,
			  pr.payment_receipt_no REF_NO,
			  'PR' REF_TYPE,
			  case 
			    when (trunc(SYSDATE) - trunc(pr.receipt_dt)) <=0 then 0
			    else round(trunc(SYSDATE) - trunc(pr.receipt_dt))
			  end DAYS_LATE,
			  NVL(pr.excess_amount,0)*-1 OUTSTANDING_AMOUNT,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 0 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_0_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >0 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 30 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_30_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >30 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 60 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_60_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >60 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 90 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_90_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >90 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 120 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_120_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >120 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 150 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_150_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >150 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 180 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_180_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >180 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 210 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_210_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >210 AND (trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 360 then NVL(pr.excess_amount,0)*-1 else 0 end LESS_360_DAYS,
			  case when (trunc(SYSDATE) - trunc(pr.receipt_dt)) >360 then NVL(pr.excess_amount,0)*-1 else 0 end MORE_360_DAYS,
			case
			  when sales.name is not null then sales.name
			  when p_sales.name is not null then p_sales.name
			  when gp_sales.name is not null then gp_sales.name
			end SALES_PERSON,
			case
			  when acct_ind.master_no is not null then acct_ind.master_value
			  when p_acct_ind.master_no is not null then p_acct_ind.master_value
			  when gp_acct_ind.master_no is not null then gp_acct_ind.master_value
			  when pers_acct_ind.master_no is not null then pers_acct_ind.master_value
			end INDUSTRY
			FROM bmtb_payment_receipt pr
			inner join amtb_account acct on pr.account_no = acct.account_no
			left join amtb_account p_acct on acct.parent_no = p_acct.account_no
			left join amtb_account gp_acct on p_acct.parent_no = gp_acct.account_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) latest_acct_sales ON latest_acct_sales.account_no = acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON acct_sales ON acct_sales.ACCT_SALESPERSON_NO = latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON sales ON acct_sales.salesperson_no = sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) p_latest_acct_sales ON p_latest_acct_sales.account_no = p_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON p_acct_sales ON p_acct_sales.ACCT_SALESPERSON_NO = p_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON p_sales ON p_acct_sales.salesperson_no = p_sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) gp_latest_acct_sales ON gp_latest_acct_sales.account_no = gp_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON gp_acct_sales ON gp_acct_sales.ACCT_SALESPERSON_NO = gp_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON gp_sales ON gp_acct_sales.salesperson_no = gp_sales.salesperson_no
			LEFT JOIN AMTB_CORPORATE_DETAIL acct_det ON acct.account_no = acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL p_acct_det ON p_acct.account_no = p_acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL gp_acct_det ON gp_acct.account_no = gp_acct_det.account_no
			LEFT JOIN AMTB_PERSONAL_DETAIL pers_acct_det ON gp_acct.account_no = pers_acct_det.account_no
			LEFT JOIN MSTB_MASTER_TABLE acct_ind ON acct_det.industry = acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE p_acct_ind ON p_acct_det.industry = p_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE gp_acct_ind ON gp_acct_det.industry = gp_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE pers_acct_ind ON pers_acct_det.industry = pers_acct_ind.master_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER ar ON ar.AR_CONTROL_CODE_NO = acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER entity ON ar.entity_no = entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER p_ar ON p_ar.AR_CONTROL_CODE_NO = p_acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER p_entity ON p_ar.entity_no = p_entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER gp_ar ON gp_ar.AR_CONTROL_CODE_NO = gp_acct.AR_CONTROL_CODE_NO
		  	LEFT JOIN FMTB_ENTITY_MASTER gp_entity ON gp_ar.entity_no = gp_entity.entity_no
			WHERE 
			  (
			    :accountNo is null
			    or
			    acct.cust_no = :accountNo
			    or
			    p_acct.cust_no = :accountNo
			    or
			    gp_acct.cust_no = :accountNo
			  )
			  AND
			  (
			    acct.account_name like :accountName
			    or
			    p_acct.account_name like :accountName
			    or
			    gp_acct.account_name like :accountName
			  )
			  AND
			  (
			    :entityNo is null
			    or
			    entity.entity_no = :entityNo
			    or
			    p_entity.entity_no = :entityNo
			    or
			    gp_entity.entity_no = :entityNo
			  )
			  AND
			  (
			    :arControlCodeNo is null
			    or
			    ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    p_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    gp_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			  )
			  AND
			  (
			    :outstandingAmount is null
			    or
			    (pr.EXCESS_AMOUNT*-1) > :outstandingAmount
			  )
			  AND
			  pr.EXCESS_AMOUNT > 0
			  AND
	          pr.CANCEL_DT is null
			  AND
			  case when round(trunc(SYSDATE) - trunc(pr.receipt_dt)) <= 0 then 0 else round(trunc(SYSDATE) - trunc(pr.receipt_dt)) end >= '0'
			  AND
			  (
			    :type is null
			    or
			    'R' = :type
			  )	  
		
			UNION ALL
		
			SELECT
			  case
			    when gp_acct.account_no is not null then gp_acct.cust_no
			    when p_acct.account_no is not null then p_acct.cust_no
			    else acct.cust_no
			  end CUSTOMER_ID,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_name
			    when p_acct.account_no is not null then p_acct.account_name
			    else acct.account_name
			  end CUSTOMER_NAME,
			  case
			    when gp_acct.account_no is not null then gp_acct.account_category
			    when p_acct.account_no is not null then p_acct.account_category
			    else acct.account_category
			  end account_category,
			  note.note_no REF_NO,
			  note.note_type REF_TYPE,
			  0 DAYS_LATE,
			  case 
			    when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
			    when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
			    else 0
			  end OUTSTANDING_AMOUNT,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) <= 0 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_0_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >0 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 30 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_30_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >30 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 60 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end  
			  else 0 end LESS_60_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >60 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 90 then 
			    case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
				  when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
				  else 0
				end
			  else 0 end LESS_90_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >90 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 120 then 
			    case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
				  when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
				  else 0
				end
			  else 0 end LESS_120_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >120 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 150 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_150_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >150 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 180 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_180_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >180 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 210 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_210_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >210 AND (trunc(SYSDATE) - trunc(note.created_dt)) <= 360 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end LESS_360_DAYS,
			  case when (trunc(SYSDATE) - trunc(note.created_dt)) >360 then 
		              case 
			      when note.note_type = 'C' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST) * -1
		                when note.note_type = 'D' then (note.NOTE_AMOUNT + note.ADMIN_FEE - note.DISCOUNT - note.PROD_DIS + note.GST)
		                else 0
			    end
			  else 0 end MORE_360_DAYS,
			case
			  when sales.name is not null then sales.name
			  when p_sales.name is not null then p_sales.name
			  when gp_sales.name is not null then gp_sales.name
			end SALES_PERSON,
			case
			  when acct_ind.master_no is not null then acct_ind.master_value
			  when p_acct_ind.master_no is not null then p_acct_ind.master_value
			  when gp_acct_ind.master_no is not null then gp_acct_ind.master_value
			  when pers_acct_ind.master_no is not null then pers_acct_ind.master_value
			end INDUSTRY
			FROM bmtb_note note
			inner join amtb_account acct on note.account_no = acct.account_no
			left join amtb_account p_acct on acct.parent_no = p_acct.account_no
			left join amtb_account gp_acct on p_acct.parent_no = gp_acct.account_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) latest_acct_sales ON latest_acct_sales.account_no = acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON acct_sales ON acct_sales.ACCT_SALESPERSON_NO = latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON sales ON acct_sales.salesperson_no = sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) p_latest_acct_sales ON p_latest_acct_sales.account_no = p_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON p_acct_sales ON p_acct_sales.ACCT_SALESPERSON_NO = p_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON p_sales ON p_acct_sales.salesperson_no = p_sales.salesperson_no
			LEFT JOIN (
			    select account_no, max(ACCT_SALESPERSON_NO) as ACCT_SALESPERSON_NO
			    from AMTB_ACCT_SALESPERSON
			    where trunc(sysdate) >= EFFECTIVE_DT_FROM
	            and (trunc(sysdate) <= EFFECTIVE_DT_TO or EFFECTIVE_DT_TO is null)
			    group by account_no
			    ) gp_latest_acct_sales ON gp_latest_acct_sales.account_no = gp_acct.account_no
	        LEFT JOIN AMTB_ACCT_SALESPERSON gp_acct_sales ON gp_acct_sales.ACCT_SALESPERSON_NO = gp_latest_acct_sales.ACCT_SALESPERSON_NO
			LEFT JOIN MSTB_SALESPERSON gp_sales ON gp_acct_sales.salesperson_no = gp_sales.salesperson_no
			LEFT JOIN AMTB_CORPORATE_DETAIL acct_det ON acct.account_no = acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL p_acct_det ON p_acct.account_no = p_acct_det.account_no
			LEFT JOIN AMTB_CORPORATE_DETAIL gp_acct_det ON gp_acct.account_no = gp_acct_det.account_no
			LEFT JOIN AMTB_PERSONAL_DETAIL pers_acct_det ON gp_acct.account_no = pers_acct_det.account_no
			LEFT JOIN MSTB_MASTER_TABLE acct_ind ON acct_det.industry = acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE p_acct_ind ON p_acct_det.industry = p_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE gp_acct_ind ON gp_acct_det.industry = gp_acct_ind.master_no
			LEFT JOIN MSTB_MASTER_TABLE pers_acct_ind ON pers_acct_det.industry = pers_acct_ind.master_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER ar ON ar.AR_CONTROL_CODE_NO = acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER entity ON ar.entity_no = entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER p_ar ON p_ar.AR_CONTROL_CODE_NO = p_acct.AR_CONTROL_CODE_NO
			LEFT JOIN FMTB_ENTITY_MASTER p_entity ON p_ar.entity_no = p_entity.entity_no
			LEFT JOIN FMTB_AR_CONT_CODE_MASTER gp_ar ON gp_ar.AR_CONTROL_CODE_NO = gp_acct.AR_CONTROL_CODE_NO
		  	LEFT JOIN FMTB_ENTITY_MASTER gp_entity ON gp_ar.entity_no = gp_entity.entity_no
			WHERE 
			  (
			    :accountNo is null
			    or
			    acct.cust_no = :accountNo
			    or
			    p_acct.cust_no = :accountNo
			    or
			    gp_acct.cust_no = :accountNo
			  )
			  AND
			  (
			    acct.account_name like :accountName
			    or
			    p_acct.account_name like :accountName
			    or
			    gp_acct.account_name like :accountName
			  )
			  AND
			  (
			    :entityNo is null
			    or
			    entity.entity_no = :entityNo
			    or
			    p_entity.entity_no = :entityNo
			    or
			    gp_entity.entity_no = :entityNo
			  )
			  AND
			  (
			    :arControlCodeNo is null
			    or
			    ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    p_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			    or
			    gp_ar.AR_CONTROL_CODE_NO = :arControlCodeNo
			  )
			  AND
			  (
			    :outstandingAmount is null
			    or
			    note.NOTE_AMOUNT > :outstandingAmount
			  )
			  AND
			  note.status = 'A'
			  AND
			  case when round(trunc(SYSDATE) - trunc(note.created_dt)) <= 0 then 0 else round(trunc(SYSDATE) - trunc(note.created_dt)) end >= 0
			  AND
			  (
			    :type is null
			    or
			    note.note_type = :type
			  )
		) temp
		group by customer_id, CUSTOMER_NAME, account_category, INDUSTRY, SALES_PERSON
		order by
		case when :sortBy = '1' then CUSTOMER_NAME END,
		case when :sortBy = '1' then customer_id END,
		case when :sortBy = '2' then OUTSTANDING_AMOUNT END asc,
		case when :sortBy = '2' then CUSTOMER_NAME END,
		case when :sortBy = '2' then customer_id END,
		case when :sortBy = '3' then OUTSTANDING_AMOUNT END desc,
		case when :sortBy = '3' then CUSTOMER_NAME END,
		case when :sortBy = '3' then customer_id END
	) temp2
	left join (
		select
			customer_id,
            (
                sum(total_sales)
                /
                -- Divide by days to date to the current year
                -- +1 to include current day therefore will never encounter 0 [(01-01-2010 - 01-01-2010 + 1) = 1]
                ((trunc(sysdate) - to_date(to_char(sysdate, 'yyyy')||'-01-01', 'yyyy-mm-dd')) + 1)
            ) as divisor
		from (	
	        select
               	case 
                   when gp_acct.CUST_NO is not null then gp_acct.CUST_NO
                   when p_acct.CUST_NO is not null then p_acct.CUST_NO
                   when acct.CUST_NO is not null then acct.CUST_NO
            	end as customer_id,
				sum(new_txn) as total_sales
            from bmtb_invoice_header bih
			inner join amtb_account acct on acct.account_no = bih.debt_to
			left join amtb_account p_acct on p_acct.account_no = acct.parent_no
			left join amtb_account gp_acct on gp_acct.account_no = p_acct.parent_no
			where
		  	to_char(bih.INVOICE_DATE, 'yyyy') = to_char(sysdate, 'yyyy')
		  	AND
		  	bih.new_txn != 0
            group by acct.CUST_NO, p_acct.CUST_NO, gp_acct.CUST_NO
       	) temp3
        group by customer_id
	) temp4 on temp2.customer_id = temp4.customer_id
	left join(
		select LISTAGG(PRODUCT_TYPE_ID, ',') WITHIN GROUP  (ORDER BY CUST_NO) as subscribed_product_type, CUST_NO 
		from AMTB_SUBSC_TO subsc
		inner join AMTB_ACCOUNT acct on subsc.ACCOUNT_NO = acct.ACCOUNT_NO
			and acct.CUST_NO is not null
		where subsc.account_no in (
			select account_no 
			from AMTB_SUBSC_TO 
		) group by acct.CUST_NO
	) subscribed on temp2.customer_id = subscribed.CUST_NO
	]]>
</sql-query>

</hibernate-mapping>
