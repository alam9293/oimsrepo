<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="invoiceReport">
	<return-scalar column="aa" 	type="string"/>
	<return-scalar column="bb" 	type="string"/>
	<return-scalar column="cc" 	type="string"/>
	<return-scalar column="account_no" 			type="string"/>
	<return-scalar column="account_name" 		type="string"/>
	<return-scalar column="account_category"	type="string"/>
	<return-scalar column="e_invoice_flag"		type="string"/>
	<return-scalar column="invoice_no" 			type="string"/>
	<return-scalar column="invoice_date" 		type="string"/>
	<return-scalar column="invoice_format" 		type="string"/>
	<return-scalar column="prev_balance" 		type="string"/>
	<return-scalar column="prev_payment" 		type="string"/>
	<return-scalar column="new_txn" 			type="string"/>
	<return-scalar column="new_balance"			type="string"/>
	<return-scalar column="less_30_days" 		type="string"/>
	<return-scalar column="less_60_days" 		type="string"/>
	<return-scalar column="less_90_days" 		type="string"/>
	<return-scalar column="more_90_days" 		type="string"/>
	<return-scalar column="charge_to"			type="string"/>
	<return-scalar column="name"				type="string"/>
	<return-scalar column="invoice_printing"	type="string"/>
	<return-scalar column="outsource_printing"	type="string"/>
	<![CDATA[
	select case when acct.CUST_NO is not null then acct.CUST_NO when parent.CUST_NO is not null then parent.CUST_NO else grand.CUST_NO end as account_no,
    case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end as account_name,
    acct.ACCOUNT_CATEGORY, nvl(case when acct.CUST_NO is not null then acct.E_INVOICE_FLAG when parent.CUST_NO is not null then parent.E_INVOICE_FLAG else grand.E_INVOICE_FLAG end, '') as e_invoice_flag,
    header.INVOICE_NO,
    to_char(header.INVOICE_DATE, 'dd/mm/yyyy') as INVOICE_DATE,
    case when header.INVOICE_FORMAT = 'D' then 'DEPOSIT' when header.INVOICE_FORMAT = 'M' then 'MISC' else 'TRIPS' end as invoice_format,
    trim(to_char(header.PREV_BALANCE, '999,999,990.00')) as PREV_BALANCE,
    trim(to_char(header.PREV_PAYMENT, '999,999,990.00')) as PREV_PAYMENT,
    trim(to_char(header.NEW_TXN, '999,999,990.00')) as NEW_TXN,
    trim(to_char(header.NEW_BALANCE, '999,999,990.00')) as NEW_BALANCE,
    trim(to_char(header.LESS_30_DAYS, '999,999,990.00')) as LESS_30_DAYS,
    trim(to_char(header.LESS_60_DAYS, '999,999,990.00')) as LESS_60_DAYS,
    trim(to_char(header.LESS_90_DAYS, '999,999,990.00')) as LESS_90_DAYS,
    trim(to_char(header.MORE_90_DAYS, '999,999,990.00')) as MORE_90_DAYS,
    case when acct.INVOICE_FORMAT is not null then case when acct.ACCOUNT_CATEGORY not in ('CORP', 'APP', 'SAPP') then acct.ACCOUNT_NAME || '(' || acct.CODE || ')' else acct.ACCOUNT_NAME end when parent.INVOICE_FORMAT is not null then case when parent.ACCOUNT_CATEGORY not in ('CORP', 'APP', 'SAPP') then parent.ACCOUNT_NAME || '(' || parent.CODE || ')' else parent.ACCOUNT_NAME end else case when grand.ACCOUNT_CATEGORY not in ('CORP', 'APP', 'SAPP') then grand.ACCOUNT_NAME || '(' || grand.CODE || ')' else grand.ACCOUNT_NAME end end as charge_to,
    salesperson.name,
    case top.INVOICE_PRINTING when 'D' then 'Double Side' when 'S' then 'Single Side' else '' end as invoice_printing,
    case top.OUTSOURCE_PRINTING_FLAG when 'Y' then 'Y' else 'N' end as outsource_printing 
    , case when acctsubpp.countprepaid_acct is null then 0 else acctsubpp.countprepaid_acct end as aa
    , case when pacctsubpp.countprepaid_pacct is null then 0 else pacctsubpp.countprepaid_pacct end as bb
    , case when gpacctsubpp.countprepaid_gpacct is null then 0 else gpacctsubpp.countprepaid_gpacct end as cc
    from BMTB_INVOICE_HEADER header
    inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
    left outer join (
    	select acctsub.account_no, count(acctppt.PREPAID) as countprepaid_acct
	    from AMTB_SUBSC_TO acctsub left outer join PMTB_PRODUCT_TYPE acctppt on acctppt.PRODUCT_TYPE_ID = acctsub.PRODUCT_TYPE_ID
	    where acctppt.PREPAID = 'Y' group by acctsub.account_no, acctppt.prepaid
    ) acctsubpp on acct.account_no = acctsubpp.account_no
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left outer join (
    	select pacctsub.account_no,count(pacctppt.PREPAID) as countprepaid_pacct
	    from AMTB_SUBSC_TO pacctsub left outer join PMTB_PRODUCT_TYPE pacctppt on pacctppt.PRODUCT_TYPE_ID = pacctsub.PRODUCT_TYPE_ID
	    where pacctppt.PREPAID = 'Y' group by pacctsub.account_no, pacctppt.prepaid
    ) pacctsubpp on parent.account_no = pacctsubpp.account_no
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    left outer join (
    	select gpacctsub.account_no,count(gpacctppt.PREPAID) as countprepaid_gpacct
	    from AMTB_SUBSC_TO gpacctsub left outer join PMTB_PRODUCT_TYPE gpacctppt on gpacctppt.PRODUCT_TYPE_ID = gpacctsub.PRODUCT_TYPE_ID
	    where gpacctppt.PREPAID = 'Y' group by gpacctsub.account_no, gpacctppt.prepaid
    ) gpacctsubpp on grand.account_no = gpacctsubpp.account_no
    LEFT JOIN amtb_account top ON top.account_no = (CASE WHEN grand.account_no IS NOT NULL THEN grand.account_no WHEN parent.account_no IS NOT NULL THEN parent.account_no ELSE acct.account_no END )
    inner join (
        select ACCOUNT_NO, max(EFFECTIVE_DT_FROM) as latest_effective from AMTB_ACCT_SALESPERSON where effective_dt_from < systimestamp group by ACCOUNT_NO
    ) last_acct_salesperson on last_acct_salesperson.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_SALESPERSON acct_salesperson on acct_salesperson.ACCOUNT_NO = last_acct_salesperson.ACCOUNT_NO and acct_salesperson.EFFECTIVE_DT_FROM = last_acct_salesperson.LATEST_EFFECTIVE and (acct_salesperson.EFFECTIVE_DT_TO is null or acct_salesperson.EFFECTIVE_DT_TO > systimestamp)
    inner join MSTB_SALESPERSON salesperson on acct_salesperson.SALESPERSON_NO = salesperson.SALESPERSON_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    where (header.PREV_BALANCE <> 0 or
    	header.PREV_PAYMENT <> 0 or
    	header.NEW_TXN <> 0 or
    	header.NEW_BALANCE <> 0 or
    	header.LESS_30_DAYS <> 0 or
    	header.LESS_60_DAYS <> 0 or
    	header.LESS_90_DAYS <> 0 or
    	header.MORE_90_DAYS <> 0
    )
    and (:entity is null or entity.ENTITY_NO = :entity)
    and ((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (
        (:invoiceType = '0') or
        (:invoiceType = '1' and header.INVOICE_FORMAT = 'D') or
        (:invoiceType = '2' and header.INVOICE_FORMAT = 'M') or
        (:invoiceType = '3' and header.INVOICE_FORMAT in ('A', 'S', 'P'))
    )
    and (:eInvoice is null or case when acct.CUST_NO is not null then acct.E_INVOICE_FLAG when parent.CUST_NO is not null then parent.E_INVOICE_FLAG else grand.E_INVOICE_FLAG end = :eInvoice)
    and (:salesPerson is null or salesperson.SALESPERSON_NO = :salesPerson)
    order by case when :sortBy = 'CNIN' then case when acct.CUST_NO is not null then to_number(acct.CUST_NO) when parent.CUST_NO is not null then to_number(parent.CUST_NO) else to_number(grand.CUST_NO) end when :sortBy = 'IN' then header.INVOICE_NO else null end,
    case when :sortBy = 'CNCN' then case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end else null end,
    case when :sortBy = 'CNIN' then header.INVOICE_NO when :sortBy = 'CNCN' then case when acct.CUST_NO is not null then to_number(acct.CUST_NO) when parent.CUST_NO is not null then to_number(parent.CUST_NO) else to_number(grand.CUST_NO) end else null end
	]]>
</sql-query>
</hibernate-mapping>