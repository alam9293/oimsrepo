<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="monthlyDebtManagementDebt">
	<return-scalar column="name" 				type="string"/>
	<return-scalar column="total_debt" 			type="string"/>
	<return-scalar column="current_debt"		type="string"/>
	<return-scalar column="less_than_31_debt"	type="string"/>
	<return-scalar column="less_than_61_debt"	type="string"/>
	<return-scalar column="more_than_61_debt"	type="string"/>
	<![CDATA[
select sales.NAME,
	trim(to_char(sum(header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0)), '999,999,990.00')) as total_debt,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 0 or DUE_DATE is null then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end), '999,999,990.00')) as current_debt,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 0 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 30 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end), '999,999,990.00')) as less_than_31_debt,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 30 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 60 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end), '999,999,990.00')) as less_than_61_debt,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 60 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end), '999,999,990.00')) as more_than_61_debt
    from BMTB_INVOICE_HEADER header
    inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
    inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    inner join AMTB_ACCT_TYPE acct_type on acct_type.ACCT_TYPE_NO = case when acct.CUST_NO is not null then acct.ACCT_TYPE_NO when parent.CUST_NO is not null then parent.ACCT_TYPE_NO else grand.ACCT_TYPE_NO end
    left join AMTB_CORPORATE_DETAIL corp_detail on corp_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    left join AMTB_PERSONAL_DETAIL pers_detail on pers_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join MSTB_MASTER_TABLE industry on industry.MASTER_NO = case when corp_detail.INDUSTRY is not null then corp_detail.INDUSTRY else pers_detail.INDUSTRY end and (:industryCode is null or (industry.MASTER_CODE = :industryCode and industry.MASTER_TYPE = 'IND'))
    left join (
select INVOICE_HEADER_NO, sum(case when detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') then -APPLIED_AMOUNT else APPLIED_AMOUNT end) as applied_amount
    from BMTB_PAYMENT_RECEIPT_DETAIL detail
    inner join BMTB_PAYMENT_RECEIPT receipt on detail.PAYMENT_RECEIPT_NO = receipt.PAYMENT_RECEIPT_NO
    where (detail.CREATED_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT is null)
    or ( detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd'))
    group by INVOICE_HEADER_NO
    ) payment on header.INVOICE_HEADER_NO = payment.INVOICE_HEADER_NO
    inner join (
select account_no, max(EFFECTIVE_DT_FROM) as last_effective_dt_from from AMTB_ACCT_SALESPERSON where EFFECTIVE_DT_FROM < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') group by account_no
    ) last_acct_sales on last_acct_sales.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_SALESPERSON acct_sales on last_acct_sales.ACCOUNT_NO = acct_sales.ACCOUNT_NO and last_acct_sales.LAST_EFFECTIVE_DT_FROM = acct_sales.EFFECTIVE_DT_FROM and (acct_sales.EFFECTIVE_DT_FROM < acct_sales.EFFECTIVE_DT_TO or acct_sales.EFFECTIVE_DT_TO is null)
    inner join MSTB_SALESPERSON sales on acct_sales.SALESPERSON_NO = sales.SALESPERSON_NO and (:salespersonNo is null or sales.SALESPERSON_NO = :salespersonNo)
    inner join (
select ACCOUNT_NO, max(EFFECTIVE_DT) as last_effective_dt from AMTB_ACCT_STATUS where EFFECTIVE_DT < current_timestamp group by ACCOUNT_NO
    ) last_status on last_status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_STATUS status on status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end and status.EFFECTIVE_DT = last_status.LAST_EFFECTIVE_DT and (:acctStatus is null or status.ACCT_STATUS = :acctStatus)
    where (:acctTypeNo is null or acct_type.ACCT_TYPE_NO = :acctTypeNo)
    and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')
    and (:entityNo is null or entity.entity_no = :entityNo)
    group by sales.SALESPERSON_NO, sales.NAME
    order by sales.SALESPERSON_NO
	]]>
</sql-query>
<sql-query name="monthlyDebtManagementReceived">
	<return-scalar column="name" 					type="string"/>
	<return-scalar column="total_received" 			type="string"/>
	<return-scalar column="current_received"		type="string"/>
	<return-scalar column="less_than_31_received"	type="string"/>
	<return-scalar column="less_than_61_received"	type="string"/>
	<return-scalar column="more_than_61_received"	type="string"/>
	<![CDATA[
select sales.NAME,
	trim(to_char(sum(APPLIED_AMOUNT), '999,999,990.00')) as total_received,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 0 or DUE_DATE is null then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end), '999,999,990.00')) as current_received,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 0 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 30 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end), '999,999,990.00')) as less_than_31_received,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 30 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 60 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end), '999,999,990.00')) as less_than_61_received,
    trim(to_char(sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 60 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end), '999,999,990.00')) as more_than_61_received
    from BMTB_PAYMENT_RECEIPT_DETAIL detail
    inner join BMTB_PAYMENT_RECEIPT payment on detail.PAYMENT_RECEIPT_NO = payment.PAYMENT_RECEIPT_NO and (payment.CANCEL_DT is null or ( detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and payment.CANCEL_DT > to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400))))
    inner join BMTB_INVOICE_HEADER header on detail.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)
    inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
    inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    inner join AMTB_ACCT_TYPE acct_type on acct_type.ACCT_TYPE_NO = case when acct.CUST_NO is not null then acct.ACCT_TYPE_NO when parent.CUST_NO is not null then parent.ACCT_TYPE_NO else grand.ACCT_TYPE_NO end
    left join AMTB_CORPORATE_DETAIL corp_detail on corp_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    left join AMTB_PERSONAL_DETAIL pers_detail on pers_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join MSTB_MASTER_TABLE industry on industry.MASTER_NO = case when corp_detail.INDUSTRY is not null then corp_detail.INDUSTRY else pers_detail.INDUSTRY end and (:industryCode is null or (industry.MASTER_CODE = :industryCode and industry.MASTER_TYPE = 'IND'))
    inner join (
select account_no, max(EFFECTIVE_DT_FROM) as last_effective_dt_from from AMTB_ACCT_SALESPERSON where EFFECTIVE_DT_FROM < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') group by account_no
    ) last_acct_sales on last_acct_sales.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_SALESPERSON acct_sales on last_acct_sales.ACCOUNT_NO = acct_sales.ACCOUNT_NO and last_acct_sales.LAST_EFFECTIVE_DT_FROM = acct_sales.EFFECTIVE_DT_FROM and (acct_sales.EFFECTIVE_DT_FROM < acct_sales.EFFECTIVE_DT_TO or acct_sales.EFFECTIVE_DT_TO is null)
    inner join MSTB_SALESPERSON sales on acct_sales.SALESPERSON_NO = sales.SALESPERSON_NO and (:salespersonNo is null or sales.SALESPERSON_NO = :salespersonNo)
    inner join (
select ACCOUNT_NO, max(EFFECTIVE_DT) as last_effective_dt from AMTB_ACCT_STATUS where EFFECTIVE_DT < current_timestamp group by ACCOUNT_NO
    ) last_status on last_status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_STATUS status on status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end and status.EFFECTIVE_DT = last_status.LAST_EFFECTIVE_DT and (:acctStatus is null or status.ACCT_STATUS = :acctStatus)
    where (:acctTypeNo is null or acct_type.ACCT_TYPE_NO = :acctTypeNo)
    and detail.CREATED_DT between to_timestamp('01-'||to_char(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd'), 'mm-yyyy')||' 00:00:00', 'dd-mm-yyyy hh24:mi:ss') and to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss')
    and (:entityNo is null or entity.entity_no = :entityNo)
    group by sales.SALESPERSON_NO, sales.NAME
    order by sales.SALESPERSON_NO
	]]>
</sql-query>
<sql-query name="monthlyDebtManagementClosing">
	<return-scalar column="name" 					type="string"/>
	<return-scalar column="total_closing" 			type="string"/>
	<return-scalar column="current_closing"			type="string"/>
	<return-scalar column="less_than_31_closing"	type="string"/>
	<return-scalar column="less_than_61_closing"	type="string"/>
	<return-scalar column="more_than_61_closing"	type="string"/>
	<![CDATA[
select debt.NAME,
	trim(to_char(debt.TOTAL_DEBT - nvl(received.TOTAL_RECEIVED, 0), '999,999,990.00')) as total_closing,
    trim(to_char(debt.CURRENT_DEBT - nvl(received.CURRENT_RECEIVED, 0), '999,999,990.00')) as current_closing,
    trim(to_char(debt.LESS_THAN_31_DEBT - nvl(received.LESS_THAN_31_RECEIVED, 0), '999,999,990.00')) as less_than_31_closing,
    trim(to_char(debt.LESS_THAN_61_DEBT - nvl(received.LESS_THAN_61_RECEIVED, 0), '999,999,990.00')) as less_than_61_closing,
    trim(to_char(debt.MORE_THAN_61_DEBT - nvl(received.MORE_THAN_61_RECEIVED, 0), '999,999,990.00')) as more_than_61_closing
    from (select sales.SALESPERSON_NO, sales.NAME, sum(header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0)) as total_debt,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 0 or DUE_DATE is null then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end) as current_debt,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 0 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 30 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end) as less_than_31_debt,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 30 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 60 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end) as less_than_61_debt,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 60 then header.OUTSTANDING_AMOUNT + nvl(payment.APPLIED_AMOUNT, 0) else 0 end) as more_than_61_debt
    from BMTB_INVOICE_HEADER header
    inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
    inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    inner join AMTB_ACCT_TYPE acct_type on acct_type.ACCT_TYPE_NO = case when acct.CUST_NO is not null then acct.ACCT_TYPE_NO when parent.CUST_NO is not null then parent.ACCT_TYPE_NO else grand.ACCT_TYPE_NO end
    left join AMTB_CORPORATE_DETAIL corp_detail on corp_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    left join AMTB_PERSONAL_DETAIL pers_detail on pers_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join MSTB_MASTER_TABLE industry on industry.MASTER_NO = case when corp_detail.INDUSTRY is not null then corp_detail.INDUSTRY else pers_detail.INDUSTRY end and (:industryCode is null or (industry.MASTER_CODE = :industryCode and industry.MASTER_TYPE = 'IND'))
    left join (
select INVOICE_HEADER_NO, sum(case when detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') then -APPLIED_AMOUNT else APPLIED_AMOUNT end) as applied_amount
    from BMTB_PAYMENT_RECEIPT_DETAIL detail
    inner join BMTB_PAYMENT_RECEIPT receipt on detail.PAYMENT_RECEIPT_NO = receipt.PAYMENT_RECEIPT_NO
    where (detail.CREATED_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT is null)
    or ( detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and receipt.CANCEL_DT > to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd'))
    group by INVOICE_HEADER_NO
    ) payment on header.INVOICE_HEADER_NO = payment.INVOICE_HEADER_NO
    inner join (
select account_no, max(EFFECTIVE_DT_FROM) as last_effective_dt_from from AMTB_ACCT_SALESPERSON where EFFECTIVE_DT_FROM < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') group by account_no
    ) last_acct_sales on last_acct_sales.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_SALESPERSON acct_sales on last_acct_sales.ACCOUNT_NO = acct_sales.ACCOUNT_NO and last_acct_sales.LAST_EFFECTIVE_DT_FROM = acct_sales.EFFECTIVE_DT_FROM and (acct_sales.EFFECTIVE_DT_FROM < acct_sales.EFFECTIVE_DT_TO or acct_sales.EFFECTIVE_DT_TO is null)
    inner join MSTB_SALESPERSON sales on acct_sales.SALESPERSON_NO = sales.SALESPERSON_NO and (:salespersonNo is null or sales.SALESPERSON_NO = :salespersonNo)
    inner join (
select ACCOUNT_NO, max(EFFECTIVE_DT) as last_effective_dt from AMTB_ACCT_STATUS where EFFECTIVE_DT < current_timestamp group by ACCOUNT_NO
    ) last_status on last_status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_STATUS status on status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end and status.EFFECTIVE_DT = last_status.LAST_EFFECTIVE_DT and (:acctStatus is null or status.ACCT_STATUS = :acctStatus)
    where (:acctTypeNo is null or acct_type.ACCT_TYPE_NO = :acctTypeNo)
    and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')
    and (:entityNo is null or entity.entity_no = :entityNo)
    group by sales.SALESPERSON_NO, sales.NAME
) debt
    left join (select sales.SALESPERSON_NO, sales.NAME, sum(APPLIED_AMOUNT) as total_received,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 0 or DUE_DATE is null then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end) as current_received,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 0 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 30 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end) as less_than_31_received,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 30 and to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE <= 60 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end) as less_than_61_received,
    sum(case when to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) - DUE_DATE > 60 then case when detail.CREATED_DT < to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)) and payment.CANCEL_DT < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') then -APPLIED_AMOUNT else APPLIED_AMOUNT end else 0 end) as more_than_61_received
    from BMTB_PAYMENT_RECEIPT_DETAIL detail
    inner join BMTB_PAYMENT_RECEIPT payment on detail.PAYMENT_RECEIPT_NO = payment.PAYMENT_RECEIPT_NO and (payment.CANCEL_DT is null or ( detail.CREATED_DT < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') and payment.CANCEL_DT > to_date(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400))))
    inner join BMTB_INVOICE_HEADER header on detail.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO and header.INVOICE_DATE < to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd') - (1/86400)
    inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
    inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    inner join AMTB_ACCT_TYPE acct_type on acct_type.ACCT_TYPE_NO = case when acct.CUST_NO is not null then acct.ACCT_TYPE_NO when parent.CUST_NO is not null then parent.ACCT_TYPE_NO else grand.ACCT_TYPE_NO end
    left join AMTB_CORPORATE_DETAIL corp_detail on corp_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    left join AMTB_PERSONAL_DETAIL pers_detail on pers_detail.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join MSTB_MASTER_TABLE industry on industry.MASTER_NO = case when corp_detail.INDUSTRY is not null then corp_detail.INDUSTRY else pers_detail.INDUSTRY end and (:industryCode is null or (industry.MASTER_CODE = :industryCode and industry.MASTER_TYPE = 'IND'))
    inner join (
select account_no, max(EFFECTIVE_DT_FROM) as last_effective_dt_from from AMTB_ACCT_SALESPERSON where EFFECTIVE_DT_FROM < to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss') group by account_no
    ) last_acct_sales on last_acct_sales.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_SALESPERSON acct_sales on last_acct_sales.ACCOUNT_NO = acct_sales.ACCOUNT_NO and last_acct_sales.LAST_EFFECTIVE_DT_FROM = acct_sales.EFFECTIVE_DT_FROM and (acct_sales.EFFECTIVE_DT_FROM < acct_sales.EFFECTIVE_DT_TO or acct_sales.EFFECTIVE_DT_TO is null)
    inner join MSTB_SALESPERSON sales on acct_sales.SALESPERSON_NO = sales.SALESPERSON_NO and (:salespersonNo is null or sales.SALESPERSON_NO = :salespersonNo)
    inner join (
select ACCOUNT_NO, max(EFFECTIVE_DT) as last_effective_dt from AMTB_ACCT_STATUS where EFFECTIVE_DT < current_timestamp group by ACCOUNT_NO
    ) last_status on last_status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end
    inner join AMTB_ACCT_STATUS status on status.ACCOUNT_NO = case when acct.CUST_NO is not null then acct.ACCOUNT_NO when parent.CUST_NO is not null then parent.ACCOUNT_NO else grand.ACCOUNT_NO end and status.EFFECTIVE_DT = last_status.LAST_EFFECTIVE_DT and (:acctStatus is null or status.ACCT_STATUS = :acctStatus)
    where (:acctTypeNo is null or acct_type.ACCT_TYPE_NO = :acctTypeNo)
    and detail.CREATED_DT between to_timestamp('01-'||to_char(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd'), 'mm-yyyy')||' 00:00:00', 'dd-mm-yyyy hh24:mi:ss') and to_timestamp(to_char(last_day(to_timestamp(substr(:receiptMonth, 0,7) || '-01', 'yyyy-mm-dd')), 'dd-mm-yyyy')||' 23:59:59', 'dd-mm-yyyy hh24:mi:ss')
    and (:entityNo is null or entity.entity_no = :entityNo)
    group by sales.SALESPERSON_NO, sales.NAME
) received on debt.SALESPERSON_NO = received.SALESPERSON_NO
order by debt.SALESPERSON_NO
	]]>
</sql-query>
</hibernate-mapping>