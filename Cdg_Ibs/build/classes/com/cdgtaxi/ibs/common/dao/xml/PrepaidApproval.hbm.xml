<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="prepaidApproval">
	<return-scalar column="account_no" 			type="string"/>
	<return-scalar column="account_name"		type="string"/>
	<return-scalar column="div_id"				type="string"/>
	<return-scalar column="div_name"			type="string"/>
	<return-scalar column="dept_id"				type="string"/>
	<return-scalar column="dept_name"			type="string"/>
	<return-scalar column="card_no"				type="string"/>
	<return-scalar column="card_name"			type="string"/>
	<return-scalar column="action_type"			type="string"/>
	<return-scalar column="action_details"		type="string"/>
	<return-scalar column="request_date"		type="string"/>
	<return-scalar column="request_by"			type="string"/>
	<return-scalar column="request_reason"		type="string"/>
	<return-scalar column="request_remarks"		type="string"/>
	<return-scalar column="approval_date"		type="string"/>
	<return-scalar column="approval_by"			type="string"/>
	<return-scalar column="approval_status"		type="string"/>
	<return-scalar column="approval_remarks"	type="string"/>
	
	
	<![CDATA[
select 
    top.CUST_NO as account_no,
    top.account_name as account_name,
    case when grand.cust_no is not null then parent.code when parent.CUST_NO is not null then acct.code else null end as div_id,
    case when grand.cust_no is not null then parent.account_name when parent.CUST_NO is not null then acct.account_name else null end as div_name,
    case when grand.cust_no is not null then acct.CODE else null end as dept_id,
    case when grand.cust_no is not null then acct.ACCOUNT_NAME else null end as dept_name,
    product.CARD_NO as card_no,
    product.NAME_ON_PRODUCT as card_name,
    case req.REQUEST_TYPE
      when 'IS' then 'ISSUE'
      when 'TU' then 'TOP UP'
      when 'TR' then 'TRANSFER'
      when 'EE' then 'RENEW'
      when 'AD' then 'ADJUST'
    end as action_type,
    case req.REQUEST_TYPE
      when 'IS' then 'NEW CARD' || 
        case when exists (select 1 from PMTB_ISSU_REQ_CARD_PROMOTION a where a.pmtb_issuance_req_card =  issu_req_card.req_card_no)
        then ' - PROMO CODE: ' || (select LISTAGG(a.mstb_promotion_cash_plus, ', ')WITHIN GROUP (ORDER BY a.mstb_promotion_cash_plus) from PMTB_ISSU_REQ_CARD_PROMOTION a where a.pmtb_issuance_req_card =  issu_req_card.req_card_no)
        end
      when 'TU' then 'TOP UP' || 
        case when exists (select 1 from PMTB_TOP_UP_REQ_CARD_PROMOTION a where a.pmtb_top_up_req_card =  topup_req_card.req_card_no)
        then ' - PROMO CODE: ' || (select LISTAGG(a.mstb_promotion_cash_plus, ', ')WITHIN GROUP (ORDER BY a.mstb_promotion_cash_plus) from PMTB_TOP_UP_REQ_CARD_PROMOTION a where a.pmtb_top_up_req_card =  topup_req_card.req_card_no)
        end
      when 'TR' then 'TRANSFER: ' || transfer_from_product.card_no || ' to ' || transfer_to_product.card_no
      when 'EE' then  to_char(extend_req.old_bal_exp_date, 'DD-MON-YYYY')  || ' to ' || to_char(extend_req.new_bal_exp_date, 'DD-MON-YYYY')
      when 'AD' then 'ADJUST VALUE: ' || adjust_req.adjust_value_amount || ' CASHPLUS: '|| adjust_req.adjust_cashplus_amount
    end as action_details,
    to_char(req.REQUEST_DATE, 'YYYY-MM-DD HH24:MM:SS') as request_date,
    REQUESTOR.NAME as request_by,
    '' as request_reason,
    REQ.REQUEST_REMARKS as request_remarks,
    to_char(req.APPROVAL_DATE, 'YYYY-MM-DD HH24:MM:SS') as approval_date,
    APPROVER.NAME as approval_by,
    req.APPROVAL_STATUS as approval_status ,
    REQ.APPROVAL_REMARKS as approval_remarks
    from PMTB_PREPAID_REQ req
    left join SATB_USER requestor on REQ.REQUESTOR = requestor.USER_ID
    left join SATB_USER approver on REQ.APPROVER = approver.USER_ID
    left join PMTB_ISSUANCE_REQ issu_req on req.REQ_NO = issu_req.REQ_NO
    left join PMTB_ISSUANCE_REQ_CARD issu_req_card on issu_req.REQ_NO = issu_req_card.PMTB_ISSUANCE_REQ
    left join PMTB_TOP_UP_REQ topup_req on req.REQ_NO = topup_req.REQ_NO
    left join PMTB_TOP_UP_REQ_CARD topup_req_card on topup_req.REQ_NO = topup_req_card.PMTB_TOP_UP_REQ
    left join PMTB_TRANSFER_REQ transfer_req on req.REQ_NO = transfer_req.REQ_NO
    left join PMTB_PRODUCT transfer_from_product on TRANSFER_REQ.FROM_PMTB_PRODUCT = transfer_from_product.PRODUCT_NO
    left join PMTB_PRODUCT transfer_to_product on TRANSFER_REQ.TO_PMTB_PRODUCT = transfer_to_product.PRODUCT_NO
    left join PMTB_EXT_BAL_EXP_DATE_REQ extend_req on req.REQ_NO = extend_req.REQ_NO
    left join PMTB_ADJUSTMENT_REQ adjust_req on req.REQ_NO = adjust_req.REQ_NO
    left join PMTB_PRODUCT product on product.PRODUCT_NO = case req.REQUEST_TYPE
      when 'IS' then issu_req_card.product_no
      when 'TU' then topup_req_card.PMTB_PRODUCT
      when 'TR' then transfer_req.FROM_PMTB_PRODUCT
      when 'EE' then extend_req.PMTB_PRODUCT
      when 'AD' then adjust_req.PMTB_PRODUCT
      end
    left join AMTB_ACCOUNT acct on  acct.ACCOUNT_NO =  case
      when req.REQUEST_TYPE='IS' then issu_req_card.ACCOUNT_NO
      else product.ACCOUNT_NO
      end
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    left join AMTB_ACCOUNT top on (case when grand.cust_no is not null then grand.account_no when parent.cust_no is not null then parent.account_no else acct.account_no end) = top.account_no
    left join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
    left join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    left join AMTB_ACCT_TYPE type on top.ACCT_TYPE_NO = type.ACCT_TYPE_NO
    where req.APPROVAL_REQUIRED ='Y' 
    and (:acctType is null or type.ACCT_TEMPLATE =:acctType)
    and (:acctNo is null or top.cust_no =:acctNo)
    and (:acctName is null or top.account_name like '%' || :acctName || '%')
    and (:cardNo is null or product.card_no = :cardNo)
    and
    (
      (:requestStartDate is null and :requestEndDate is null)
      or
      (
        req.request_date between 
          case when :requestStartDate is null 
          then 
            to_date(:requestEndDate||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
          else 
            to_date(:requestStartDate||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
          end
         and 
          case when :requestEndDate is null 
          then 
            to_date(:requestStartDate||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
          else 
            to_date(:requestEndDate||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
          end
      )
   )
   and
   (
     (:approvalStartDate is null and :approvalEndDate is null)
     or
     (
       req.approval_date between 
         case when :approvalStartDate is null 
         then 
           to_date(:approvalEndDate||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         else 
           to_date(:approvalStartDate||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
         end
        and 
         case when :approvalEndDate is null 
         then 
           to_date(:approvalStartDate||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
         else 
           to_date(:approvalEndDate||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
         end
     )
  )
  and (:actionType is null or  req.REQUEST_TYPE = :actionType)
  and (:approvalStatus is null or  req.approval_status = :approvalStatus)
  and (:entityNo is null or entity.ENTITY_NO = :entityNo)
  order by
  case :sortBy when 'RD' then req.request_date end
	]]>
</sql-query>
</hibernate-mapping>