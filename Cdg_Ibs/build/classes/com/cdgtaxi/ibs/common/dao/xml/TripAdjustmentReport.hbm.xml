<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="tripAdjustmentReport">
  <return-scalar column="entity_name"       	type="string"/>
  <return-scalar column="creation_date"     	type="string"/>
  <return-scalar column="acct_no"          	 	type="string"/>
  <return-scalar column="acct_name"         	type="string"/>
  <return-scalar column="card_no"           	type="string"/>
  <return-scalar column="job_no"            	type="string"/>
  <return-scalar column="nric"              	type="string"/>
  <return-scalar column="taxi_no"           	type="string"/>
  <return-scalar column="master_code"       	type="string"/>
  <return-scalar column="trip_dt"           	type="string"/>
  <return-scalar column="name"              	type="string"/>
  <return-scalar column="fare_amt"          	type="string"/>
  <return-scalar column="admin_fee_value"   	type="string"/>
  <return-scalar column="gst_value"         	type="string"/>
  <return-scalar column="levy"              	type="string"/>
  <return-scalar column="incentive_amt"     	type="string"/>
  <return-scalar column="promo_amt"				type="string"/>
  <return-scalar column="cabrewards_amt"		type="string"/>
  <return-scalar column="txn_status"        	type="string"/>
  <return-scalar column="update_fms"        	type="string"/>
  <return-scalar column="adjust_fare_amt"   	type="string"/>
  <return-scalar column="adjust_levy"       	type="string"/>
  <return-scalar column="adjust_incentive_amt"  type="string"/>
  <return-scalar column="adjust_promo_amt"      type="string"/>
  <return-scalar column="adjust_cabrewards_amt" type="string"/>
  <return-scalar column="to_status"         	type="string"/>
  <return-scalar column="flow_dt"           	type="string"/>
  <return-scalar column="remarks"           	type="string"/>
  <return-scalar column="fms_flag"          	type="string"/>
  <return-scalar column="req_status"        	type="string"/>
  <return-scalar column="req_error_remark"  	type="string"/>
  <![CDATA[
select
  entity_name,
  case when creation_date is not null then to_char(creation_date, 'dd/MM/yyyy hh24:mi') end as creation_date,
  acct_no,
  acct_name,
  card_no,
  job_no,
  nric,
  taxi_no,
  master_code,
  trip_dt,
  name,
  fare_amt,
  admin_fee_value,
  gst_value,
  levy,
  incentive_amt,
  promo_amt,
  cabrewards_amt,
  txn_status,
  update_fms,
  adjust_fare_amt,
  adjust_levy,
  adjust_incentive_amt,
  adjust_promo_amt,
  adjust_cabrewards_amt,
  to_status,
  case when flow_dt is not null then to_char(flow_dt, 'dd/MM/yyyy hh24:mi') end as flow_dt,
  remarks,
  fms_flag,
  req_status,
  req_error_remark
from
(
   select
   distinct *
   from
   (
      select
      entity.ENTITY_NAME,
      new_flow.FLOW_DT as creation_date,
      case when acct.CUST_NO is not null then acct.CUST_NO when parent.CUST_NO is not null then parent.CUST_NO else grand.CUST_NO end as acct_no,
      case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end as acct_name,
      product.CARD_NO,
      txn.JOB_NO,
      txn.NRIC,
      txn.TAXI_NO,
      provider.MASTER_CODE,
      to_char(txn.TRIP_START_DT, 'dd/mm/yyyy hh24:mi:ss') || case when txn.TRIP_END_DT is not null then ' TO ' || to_char(txn.TRIP_END_DT, 'dd/mm/yyyy hh24:mi:ss') else '' end as trip_dt,
      type.NAME,
      txn.FARE_AMT,
      txn.ADMIN_FEE_VALUE,
      txn.GST_VALUE,
      txn.LEVY,
	  txn.INCENTIVE_AMT,
	  txn.PROMO_AMT,
	  txn.CABREWARDS_AMT,
      txn.TXN_STATUS,
      req.UPDATE_FMS,
      case when req.FMS_FLAG = 'Y' then (case when req.UPDATE_FMS = 'C' then 0-req.FMS_AMT else req.FMS_AMT end) else 0 end as adjust_fare_amt,
      case when req.FMS_FLAG = 'Y' then req.LEVY else 0 end as adjust_levy,
	  case when req.FMS_FLAG = 'Y' then (case when req.UPDATE_FMS = 'C' then 0-req.INCENTIVE_AMT else req.INCENTIVE_AMT end) else 0 end as adjust_incentive_amt,
      case when req.FMS_FLAG = 'Y' then (case when req.UPDATE_FMS = 'C' then 0-req.PROMO_AMT else req.PROMO_AMT end) else 0 end as adjust_promo_amt,
      case when req.FMS_FLAG = 'Y' then (case when req.UPDATE_FMS = 'C' then 0-req.CABREWARDS_AMT else req.CABREWARDS_AMT end) else 0 end as adjust_cabrewards_amt,
      flow.TO_STATUS,
      approve.FLOW_DT,
      req.REMARKS,
      req.FMS_FLAG,
      fms.REQ_STATUS,
      fms.REQ_ERROR_REMARK
      from TMTB_ACQUIRE_TXN txn
      left join PMTB_PRODUCT product on txn.PRODUCT_NO = product.PRODUCT_NO
      left join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
      left join PMTB_PRODUCT_TYPE type on txn.PRODUCT_TYPE_ID = type.PRODUCT_TYPE_ID
      left join TMTB_TXN_REVIEW_REQ req on txn.ACQUIRE_TXN_NO = req.ACQUIRE_TXN_NO
      left join TMTB_TXN_REVIEW_REQ_FLOW new_flow on req.TXN_REVIEW_REQ_NO = new_flow.TXN_REVIEW_REQ_NO
      and new_flow.FROM_STATUS = 'N'
      left join TMTB_TXN_REVIEW_REQ_FLOW approve on req.TXN_REVIEW_REQ_NO = approve.TXN_REVIEW_REQ_NO
      and (approve.TO_STATUS = 'A' or approve.TO_STATUS = 'R')
      left join
      (
         select
         TXN_REVIEW_REQ_NO, max(flow_dt) as latest_flow_dt
         from TMTB_TXN_REVIEW_REQ_FLOW
         group by TXN_REVIEW_REQ_NO
      )
      last_req_status on req.TXN_REVIEW_REQ_NO = last_req_status.TXN_REVIEW_REQ_NO
      left join TMTB_TXN_REVIEW_REQ_FLOW flow on flow.TXN_REVIEW_REQ_NO = req.TXN_REVIEW_REQ_NO
      and flow.FLOW_DT = last_req_status.latest_flow_dt
      inner join AMTB_ACCOUNT acct on txn.ACCOUNT_NO = acct.ACCOUNT_NO
      left join AMTB_ACCOUNT parent on parent.ACCOUNT_NO = acct.PARENT_NO
      left join AMTB_ACCOUNT grand on grand.ACCOUNT_NO = parent.PARENT_NO
      inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
      inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
      left join
      (
         select
         req.TXN_REVIEW_REQ_NO, min(fms.REQ_DATE) as first_req_date, txn.job_no
         from TMTB_TXN_REVIEW_REQ_FLOW flow
         inner join TMTB_TXN_REVIEW_REQ req on flow.TXN_REVIEW_REQ_NO = req.TXN_REVIEW_REQ_NO
         and req.FMS_FLAG = 'Y'
         and flow.TO_STATUS = 'A'
         inner join TMTB_ACQUIRE_TXN txn on req.ACQUIRE_TXN_NO = txn.ACQUIRE_TXN_NO
         inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
         inner join ITTB_FMS_DRVR_RFND_COL_REQ fms on flow.FLOW_DT <= fms.REQ_DATE
         and fms.JOB_NO = txn.JOB_NO
         and fms.TAXI_NO = txn.TAXI_NO
         and fms.NRIC = txn.NRIC
         and fms.PAYMENT_MODE = product_type.INTERFACE_MAPPING_VALUE
         group by req.TXN_REVIEW_REQ_NO, txn.job_no
      )
      first_req on req.TXN_REVIEW_REQ_NO = first_req.TXN_REVIEW_REQ_NO
      left join ITTB_FMS_DRVR_RFND_COL_REQ fms on fms.req_date = first_req.first_req_date and fms.job_no = first_req.job_no
      where req.TXN_REVIEW_REQ_NO is not null
      and :paymentType in (0, 1)
      and (:entityNo is null or entity.ENTITY_NO = :entityNo)
      and (:providerNo is null or provider.MASTER_CODE = :providerNo)
      union
      select
      entity.ENTITY_NAME,
      txn.CREATED_DT as creation_date,
      case when acct.CUST_NO is not null then acct.CUST_NO when parent.CUST_NO is not null then parent.CUST_NO else grand.CUST_NO end as acct_no,
      case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end as acct_name,
      case when product.CARD_NO is not null then product.CARD_NO else txn.EXTERNAL_CARD_NO end as CARD_NO,
      txn.JOB_NO,
      txn.NRIC,
      txn.TAXI_NO,
      provider.MASTER_CODE,
      to_char(txn.TRIP_START_DT, 'dd/mm/yyyy hh24:mi:ss') || case when txn.TRIP_END_DT is not null then ' TO ' || to_char(txn.TRIP_END_DT, 'dd/mm/yyyy hh24:mi:ss') else '' end as trip_dt,
      type.NAME,
      txn.FARE_AMT,
      txn.ADMIN_FEE_VALUE,
      txn.GST_VALUE,
      txn.LEVY,
	  txn.INCENTIVE_AMT,
	  txn.PROMO_AMT,
	  txn.CABREWARDS_AMT,
      txn.TXN_STATUS,
      txn.UPDATE_FMS,
      case when txn.FMS_FLAG = 'Y' then fms.REFUND_AMT else 0 end as adjust_fare_amt,
      case when txn.FMS_FLAG = 'Y' then fms.LEVY else 0 end as adjust_levy,
	  case when txn.FMS_FLAG = 'Y' then fms.INCENTIVE_AMT else 0 end as adjust_incentive_amt,
	  case when txn.FMS_FLAG = 'Y' then fms.PROMO_AMT else 0 end as adjust_promo_amt,	  
	  case when txn.FMS_FLAG = 'Y' then fms.CABREWARDS_AMT else 0 end as adjust_cabrewards_amt,
      null,
      null,
      txn.REMARKS,
      txn.FMS_FLAG,
      fms.REQ_STATUS,
      fms.REQ_ERROR_REMARK
      from TMTB_ACQUIRE_TXN txn
      left join PMTB_PRODUCT product on txn.PRODUCT_NO = product.PRODUCT_NO
      left join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
      left join PMTB_PRODUCT_TYPE type on txn.PRODUCT_TYPE_ID = type.PRODUCT_TYPE_ID
      inner join AMTB_ACCOUNT acct on txn.ACCOUNT_NO = acct.ACCOUNT_NO
      left join AMTB_ACCOUNT parent on parent.ACCOUNT_NO = acct.PARENT_NO
      left join AMTB_ACCOUNT grand on grand.ACCOUNT_NO = parent.PARENT_NO
      inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
      inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
      left join
      (
         select
         txn.ACQUIRE_TXN_NO, min(fms.REQ_DATE) as first_req_date, txn.JOB_NO
         from TMTB_ACQUIRE_TXN txn
         inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
         inner join ITTB_FMS_DRVR_RFND_COL_REQ fms on txn.CREATED_DT <= fms.REQ_DATE
         and fms.JOB_NO = txn.JOB_NO
         and fms.TAXI_NO = txn.TAXI_NO
         and fms.NRIC = txn.NRIC
         and fms.PAYMENT_MODE = product_type.INTERFACE_MAPPING_VALUE
         and txn.FMS_FLAG = 'Y'
         group by txn.ACQUIRE_TXN_NO, txn.job_no
      )
      first_req on txn.ACQUIRE_TXN_NO = first_req.ACQUIRE_TXN_NO
      left join ITTB_FMS_DRVR_RFND_COL_REQ fms on fms.req_date = first_req.first_req_date and fms.job_no = first_req.job_no
      where txn.created_by != 'IBS'
      and :paymentType in (0, 1)
      and (:entityNo is null or entity.ENTITY_NO = :entityNo)
      and (:providerNo is null or provider.MASTER_CODE = :providerNo)
      and not exists (select 1 from TMTB_TXN_REVIEW_REQ req left outer join tmtb_acquire_txn txn1 on txn1.acquire_txn_no = req.acquire_txn_no where txn1.job_NO = txn.job_no)
      union
      select
      entity.ENTITY_NAME,
      txn.CHARGEBACK_REFUND_DATE,
      '' as acct_no,
      '' as acct_name,
      txn.CARD_NO,
      txn.JOB_NO,
      txn.NRIC,
      txn.TAXI_NO,
      provider.MASTER_CODE,
      to_char(txn.TRIP_START_DT, 'dd/mm/yyyy hh24:mi') || case when txn.TRIP_END_DT is not null then ' TO ' || to_char(txn.TRIP_END_DT, 'dd/mm/yyyy hh24:mi') else '' end as trip_dt,
      acq.NAME,
      nvl(txn.FARE_AMT, 0) as fare_amt,
      nvl(txn.ADMIN_FEE, 0) as admin_fee,
      nvl(txn.GST, 0) as gst,
      nvl(txn.LEVY, 0) as levy,
	  nvl(txn.INCENTIVE_AMT, 0) as incentive_amt,
	  nvl(txn.PROMO_AMT, 0) as promo_amt,
	  nvl(txn.CABREWARDS_AMT, 0) as cabrewards_amt,
      case when txn.CHARGEBACK_REFUND_FARE_AMT = txn.FARE_AMT then 'VOID' else 'EDIT' end as txn_status,
      txn.UPDATE_FMS as fms_action,
      nvl(fms.REFUND_AMT, 0) as CHARGEBACK_FARE_AMT,
      nvl(fms.LEVY, 0) as chargeback_levy,
	  nvl(fms.INCENTIVE_AMT, 0) as CHARGEBACK_INCENTIVE_AMT,
	  nvl(fms.PROMO_AMT, 0) as CHARGEBACK_PROMO_AMT,
	  nvl(fms.CABREWARDS_AMT, 0) as CHARGEBACK_CABREWARDS_AMT,
      'A' as chargeback_status,
      txn.CHARGEBACK_REFUND_DATE,
      '' as REMARKS,
      txn.FMS_FLAG as FMS_FLAG,
      fms.REQ_STATUS as FMS_STATUS,
      fms.REQ_ERROR_REMARK as FMS_ERROR_MSG
      from TMTB_NON_BILLABLE_TXN txn
      inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
      and txn.CHARGEBACK_REFUND_DATE is not null
      inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
      inner join MSTB_ACQUIRER acq on pymt_type.ACQUIRER_NO = acq.ACQUIRER_NO
      inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER
      and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
      inner join
      (
         select
         MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE
         from FMTB_NON_BILLABLE_DETAIL
         where EFFECTIVE_DATE < current_date
         group by MASTER_NO
      )
      last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
      inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO
      and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
      inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
      inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
      inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
      left join
      (
         select
         txn.TXN_ID, min(fms.REQ_DATE) as first_req_date, txn.job_no
         from TMTB_NON_BILLABLE_TXN txn
         inner join TMTB_NON_BILLABLE_BATCH batch on txn.BATCH_ID = batch.BATCH_ID
         and txn.FMS_FLAG = 'Y'
         inner join MSTB_ACQUIRER acquirer on batch.ACQUIRER_NO = acquirer.ACQUIRER_NO
         inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
         inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
         inner join ITTB_FMS_DRVR_RFND_COL_REQ fms on txn.CREATED_DT <= fms.REQ_DATE
         and fms.JOB_NO = txn.JOB_NO
         and fms.TAXI_NO = txn.TAXI_NO
         and fms.NRIC = txn.NRIC
         and fms.PAYMENT_MODE = pymt_type_master.INTERFACE_MAPPING_VALUE
         and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
         group by txn.TXN_ID, txn.job_no
      )
      first_req on txn.TXN_ID = first_req.TXN_ID
      left join ITTB_FMS_DRVR_RFND_COL_REQ fms on fms.req_date = first_req.first_req_date and fms.job_no = first_req.job_no
      where
      (
         pymt_type_master.MASTER_VALUE like case when :paymentType = 0 then '%' when :paymentType = 3 then 'NETS' else '' end or pymt_type_master.MASTER_VALUE not like case when :paymentType = 0 then '%' when :paymentType = 2 then 'NETS' else '%' end
      )
      and (:entityNo is null or entity.ENTITY_NO = :entityNo)
      and (:providerNo is null or provider.MASTER_CODE = :providerNo)
      union
      select
      entity.ENTITY_NAME,
      txn.CREATED_DT as creation_date,
      case when acct.CUST_NO is not null then acct.CUST_NO when parent.CUST_NO is not null then parent.CUST_NO else grand.CUST_NO end as acct_no,
      case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end as acct_name,
      case when product.CARD_NO is not null then product.CARD_NO else txn.EXTERNAL_CARD_NO end as CARD_NO,
      txn.JOB_NO,
      txn.NRIC,
      txn.TAXI_NO,
      provider.MASTER_CODE,
      to_char(txn.TRIP_START_DT, 'dd/mm/yyyy hh24:mi:ss') || case when txn.TRIP_END_DT is not null then ' TO ' || to_char(txn.TRIP_END_DT, 'dd/mm/yyyy hh24:mi:ss') else '' end as trip_dt,
      type.NAME,
      txn.FARE_AMT,
      txn.ADMIN_FEE_VALUE,
      txn.GST_VALUE,
      txn.LEVY,
	  txn.INCENTIVE_AMT,
	  txn.PROMO_AMT,
	  txn.CABREWARDS_AMT,
      txn.TXN_STATUS,
      txn.UPDATE_FMS,
      case when txn.FMS_FLAG = 'Y' then fms.REFUND_AMT else 0 end as adjust_fare_amt,
      case when txn.FMS_FLAG = 'Y' then fms.LEVY else 0 end as adjust_levy,
      case when txn.FMS_FLAG = 'Y' then fms.INCENTIVE_AMT else 0 end as adjust_incentive_amt,
      case when txn.FMS_FLAG = 'Y' then fms.PROMO_AMT else 0 end as adjust_promo_amt,
      case when txn.FMS_FLAG = 'Y' then fms.CABREWARDS_AMT else 0 end as adjust_cabrewards_amt,
      null,
      null,
      txn.REMARKS,
      txn.FMS_FLAG,
      fms.REQ_STATUS,
      fms.REQ_ERROR_REMARK
      from TMTB_ACQUIRE_TXN txn
      left join PMTB_PRODUCT product on txn.PRODUCT_NO = product.PRODUCT_NO
      left join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
      left join PMTB_PRODUCT_TYPE type on txn.PRODUCT_TYPE_ID = type.PRODUCT_TYPE_ID
      inner join AMTB_ACCOUNT acct on txn.ACCOUNT_NO = acct.ACCOUNT_NO
      left join AMTB_ACCOUNT parent on parent.ACCOUNT_NO = acct.PARENT_NO
      left join AMTB_ACCOUNT grand on grand.ACCOUNT_NO = parent.PARENT_NO
      inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
      inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
      left join
      (
         select
         txn.ACQUIRE_TXN_NO, min(fms.REQ_DATE) as first_req_date, txn.job_no
         from TMTB_ACQUIRE_TXN txn
         inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
         inner join ITTB_FMS_DRVR_RFND_COL_REQ fms on txn.CREATED_DT < fms.REQ_DATE - interval '5' second 
         and fms.JOB_NO = txn.JOB_NO
         and fms.TAXI_NO = txn.TAXI_NO
         and fms.NRIC = txn.NRIC
         and fms.PAYMENT_MODE = product_type.INTERFACE_MAPPING_VALUE
         and txn.FMS_FLAG = 'Y'
         group by txn.ACQUIRE_TXN_NO, txn.job_no
      )
      first_req on txn.ACQUIRE_TXN_NO = first_req.ACQUIRE_TXN_NO
      left join ITTB_FMS_DRVR_RFND_COL_REQ fms on fms.req_date = first_req.first_req_date and fms.job_no = first_req.job_no
      where txn.JOB_NO in
      (
         select
         txn.JOB_NO
         from TMTB_ACQUIRE_TXN txn
         left join PMTB_PRODUCT product on txn.PRODUCT_NO = product.PRODUCT_NO
         left join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
         left join PMTB_PRODUCT_TYPE type on txn.PRODUCT_TYPE_ID = type.PRODUCT_TYPE_ID
         left join TMTB_TXN_REVIEW_REQ req on txn.ACQUIRE_TXN_NO = req.ACQUIRE_TXN_NO
         left join TMTB_TXN_REVIEW_REQ_FLOW new_flow on req.TXN_REVIEW_REQ_NO = new_flow.TXN_REVIEW_REQ_NO
         and new_flow.FROM_STATUS = 'N'
         left join TMTB_TXN_REVIEW_REQ_FLOW approve on req.TXN_REVIEW_REQ_NO = approve.TXN_REVIEW_REQ_NO
         and (approve.TO_STATUS = 'A' or approve.TO_STATUS = 'R')
         left join
         (
            select
            TXN_REVIEW_REQ_NO, max(flow_dt) as latest_flow_dt
            from TMTB_TXN_REVIEW_REQ_FLOW
            group by TXN_REVIEW_REQ_NO
         )
         last_req_status on req.TXN_REVIEW_REQ_NO = last_req_status.TXN_REVIEW_REQ_NO
         left join TMTB_TXN_REVIEW_REQ_FLOW flow on flow.TXN_REVIEW_REQ_NO = req.TXN_REVIEW_REQ_NO
         and flow.FLOW_DT = last_req_status.latest_flow_dt
         inner join AMTB_ACCOUNT acct on txn.ACCOUNT_NO = acct.ACCOUNT_NO
         left join AMTB_ACCOUNT parent on parent.ACCOUNT_NO = acct.PARENT_NO
         left join AMTB_ACCOUNT grand on grand.ACCOUNT_NO = parent.PARENT_NO
         inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
         inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
         left join
         (
            select
            req.TXN_REVIEW_REQ_NO, min(fms.REQ_DATE) as first_req_date, txn.job_no
            from TMTB_TXN_REVIEW_REQ_FLOW flow
            inner join TMTB_TXN_REVIEW_REQ req on flow.TXN_REVIEW_REQ_NO = req.TXN_REVIEW_REQ_NO
            and req.FMS_FLAG = 'Y'
            and flow.TO_STATUS = 'A'
            inner join TMTB_ACQUIRE_TXN txn on req.ACQUIRE_TXN_NO = txn.ACQUIRE_TXN_NO
            inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
            inner join ITTB_FMS_DRVR_RFND_COL_REQ fms on flow.FLOW_DT <= fms.REQ_DATE
            and fms.JOB_NO = txn.JOB_NO
            and fms.TAXI_NO = txn.TAXI_NO
            and fms.NRIC = txn.NRIC
            and fms.PAYMENT_MODE = product_type.INTERFACE_MAPPING_VALUE
            group by req.TXN_REVIEW_REQ_NO, txn.job_no
         )
         first_req on req.TXN_REVIEW_REQ_NO = first_req.TXN_REVIEW_REQ_NO
         left join ITTB_FMS_DRVR_RFND_COL_REQ fms on fms.req_date = first_req.first_req_date and fms.job_no = first_req.job_no
         where req.TXN_REVIEW_REQ_NO is not null
         and :paymentType in (0, 1)
         and (:entityNo is null or entity.ENTITY_NO = :entityNo)
         and (:providerNo is null or provider.MASTER_CODE = :providerNo)
      )
      and txn.TXN_STATUS in ('A', 'B')
      and :paymentType in (0, 1)
      and (:entityNo is null or entity.ENTITY_NO = :entityNo)
      and (:providerNo is null or provider.MASTER_CODE = :providerNo)
   )
   where (:paymentType in (2, 3) or acct_no like :acctNo)
   and (:paymentType in (2, 3) or acct_name like :acctName)
   and
   (
      (
         :createStart is null
         and :createEnd is null
      )
      or
      (
         CREATION_DATE between case when :createStart is null then to_date
         (
            :createEnd||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss'
         )
         else to_date(:createStart||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss') end
         and case when :createEnd is null then to_date
         (
            :createStart||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss'
         )
         else to_date(:createEnd||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end
      )
   )
   and
   (
      (
         :approveStart is null
         and :approveEnd is null
      )
      or
      (
         FLOW_DT between case when :approveStart is null then to_date
         (
            :approveEnd||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss'
         )
         else to_date
         (
            :approveStart||' 00:00:00', 'yyyy-mm-dd hh24:mi:ss'
         )
         end
         and case when :approveEnd is null then to_date
         (
            :approveStart||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss'
         )
         else to_date(:approveEnd||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end
      )
   )
   and (:approvalStatus is null or TO_STATUS = :approvalStatus)
   and (:txnStatus is null or TXN_STATUS = :txnStatus)
   and (:action is null or UPDATE_FMS = :action)
   and (:fmsUpdate is null or FMS_FLAG = :fmsUpdate)
   order by update_fms,
   case when :sort = 'PT' then NAME else null end,
   case when :sort = 'CD' then CREATION_DATE else null end
)

  ]]>
</sql-query>
</hibernate-mapping>