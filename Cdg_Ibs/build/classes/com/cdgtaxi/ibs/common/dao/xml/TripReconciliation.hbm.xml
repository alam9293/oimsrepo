<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="tripReconciliation">
	<return-scalar column="ENTITY_NAME" 				type="string"/>
	<return-scalar column="account_no" 					type="string"/>
	<return-scalar column="account_name" 				type="string"/>
	<return-scalar column="job_type" 					type="string"/>
	<return-scalar column="product_type_name" 			type="string"/>
	<return-scalar column="upload_date" 				type="string"/>
	<return-scalar column="job_no" 						type="string"/>
	<return-scalar column="trip_date" 					type="string"/>
	<return-scalar column="trip_time" 					type="string"/>
	<return-scalar column="TAXI_NO" 					type="string"/>
	<return-scalar column="NRIC" 						type="string"/>
	<return-scalar column="company_code" 				type="string"/>
	<return-scalar column="PICKUP_ADDRESS" 				type="string"/>
	<return-scalar column="DESTINATION" 				type="string"/>
	<return-scalar column="FARE_AMT" 					type="string"/>
	<return-scalar column="BILLABLE_AMT" 				type="string"/>
	<return-scalar column="ADMIN_FEE_VALUE" 			type="string"/>
	<return-scalar column="GST_VALUE" 					type="string"/>
	<return-scalar column="total" 						type="string"/>
	<return-scalar column="invoice_month" 				type="string"/>
	<return-scalar column="invoice_year" 				type="string"/>
	<return-scalar column="invoice_no" 					type="string"/>
	<return-scalar column="main_contact_person_name"	type="string"/>
	<return-scalar column="division_code" 				type="string"/>
	<return-scalar column="division_name" 				type="string"/>
	<return-scalar column="department_code" 			type="string"/>
	<return-scalar column="department_name" 			type="string"/>
	<return-scalar column="vehicle_type" 				type="string"/>
	<return-scalar column="TRIP_TYPE" 					type="string"/>
	<return-scalar column="PASSENGER_NAME" 				type="string"/>
	<return-scalar column="FLIGHT_INFO" 				type="string"/>
	<return-scalar column="BOOKED_BY" 					type="string"/>
	<return-scalar column="BOOKING_REF" 				type="string"/>
	<return-scalar column="SURCHARGE" 					type="string"/>
	<return-scalar column="PROJECT_DESC" 				type="string"/>
	<return-scalar column="TXN_STATUS" 					type="string"/>
	
	<![CDATA[
	select * from (
	select
	case
		when gp_acct.account_no is not null then gp_acct.cust_no
		when p_acct.account_no is not null then p_acct.cust_no
		else acct.cust_no
	end account_no,
	case
		when gp_acct.account_no is not null then gp_acct.account_name
		when p_acct.account_no is not null then p_acct.account_name
		else acct.account_name
	end account_name,
	case
		when product_type.card_no is not null then product_type.card_no
		else job_type_master.master_value
	end job_type,
    txn.job_no,
    case 
        when txn.TRIP_END_DT is not null then to_char(txn.TRIP_START_DT, 'dd/MM/yyyy') || ' TO ' || to_char(txn.TRIP_END_DT, 'dd/MM/yyyy')
        else to_char(txn.TRIP_START_DT, 'dd/MM/yyyy')
    end trip_date,
    case 
        when txn.TRIP_END_DT is not null then to_char(txn.TRIP_START_DT, 'hh24:mi:ss') || ' TO ' || to_char(txn.TRIP_END_DT, 'hh24:mi:ss')
        else to_char(txn.TRIP_START_DT, 'hh24:mi:ss')
    end trip_time,
    txn.TAXI_NO,
    txn.PICKUP_ADDRESS,
    txn.DESTINATION,
    txn.FARE_AMT,
    txn.ADMIN_FEE_VALUE - txn.PROD_DIS_VALUE as ADMIN_FEE_VALUE,
    txn.GST_VALUE,
    NVL(txn.BILLABLE_AMT, 0) + NVL(txn.ADMIN_FEE_VALUE, 0) - NVL(txn.PROD_DIS_VALUE, 0) - NVL(txn.PROMO_DIS_VALUE, 0) + NVL(txn.GST_VALUE, 0) total,
    to_char(inv_hdr.INVOICE_DATE,'MM') invoice_month,
    to_char(inv_hdr.INVOICE_DATE,'yyyy') invoice_year,
    inv_hdr.INVOICE_NO invoice_no,
    case
        when main_saluatation.MASTER_NO is not null then main_saluatation.MASTER_VALUE || ' ' || contact_person.MAIN_CONTACT_NAME
        else contact_person.MAIN_CONTACT_NAME
    end main_contact_person_name,
    case
        when p_acct.ACCOUNT_CATEGORY = 'DIV' then p_acct.code
        when acct.ACCOUNT_CATEGORY = 'DIV' then acct.code
    end division_code,
    case
        when p_acct.ACCOUNT_CATEGORY = 'DIV' then p_acct.ACCOUNT_NAME
        when acct.ACCOUNT_CATEGORY = 'DIV' then acct.ACCOUNT_NAME
    end division_name,
    case
        when acct.ACCOUNT_CATEGORY = 'DEPT' then acct.code
    end department_code,
    case
        when acct.ACCOUNT_CATEGORY = 'DEPT' then acct.ACCOUNT_NAME
    end department_name,
    vt.MASTER_VALUE vehicle_type,
    vtt.MASTER_VALUE TRIP_TYPE,
    txn.PASSENGER_NAME,
    txn.FLIGHT_INFO,
    txn.BOOKED_BY,
    txn.BOOKING_REF,
    txn.SURCHARGE,
    txn.PROJECT_DESC,
    txn.TXN_STATUS,
    entity.ENTITY_NAME,
    product_type.NAME_ON_PRODUCT AS product_type_name,
    case 
        when txn.CREATED_DT is not null then to_char(txn.CREATED_DT, 'dd/MM/yyyy')
    end upload_date,
    comp_code.MASTER_VALUE AS company_code,
    txn.BILLABLE_AMT - txn.PROMO_DIS_VALUE as BILLABLE_AMT,
    txn.NRIC,
    case 
		when acct.account_category = 'CORP' or acct.account_category = 'APP' then 1
		when acct.account_category = 'DIV' or acct.account_category = 'SAPP' then 2
		when acct.account_category = 'DEPT' then 3
	end ACCOUNT_TYPE_SORTING
	from TMTB_ACQUIRE_TXN txn
	left join AMTB_ACCOUNT acct on txn.ACCOUNT_NO = acct.ACCOUNT_NO
	left join PMTB_PRODUCT product_type on txn.PRODUCT_NO = product_type.PRODUCT_NO
	left join MSTB_MASTER_TABLE comp_code on txn.SERVICE_PROVIDER = comp_code.MASTER_NO
	left join AMTB_ACCT_MAIN_CONTACT main_contact on acct.ACCOUNT_NO = MAIN_CONTACT.ACCOUNT_NO and MAIN_CONTACT.MAIN_CONTACT_TYPE = 'B'
	left join AMTB_CONTACT_PERSON contact_person on contact_person.CONTACT_PERSON_NO = main_contact.CONTACT_PERSON_NO
	left join AMTB_ACCOUNT p_acct on acct.PARENT_NO = p_acct.ACCOUNT_NO
	left join AMTB_ACCOUNT gp_acct on p_acct.PARENT_NO = gp_acct.ACCOUNT_NO
	left join FMTB_AR_CONT_CODE_MASTER arcode on arcode.AR_CONTROL_CODE_NO = (case
		when gp_acct.account_no is not null then gp_acct.AR_CONTROL_CODE_NO
		when p_acct.account_no is not null then p_acct.AR_CONTROL_CODE_NO
		else acct.AR_CONTROL_CODE_NO end
	)
	left join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = arcode.ENTITY_NO
	left join MSTB_MASTER_TABLE vt on vt.MASTER_NO = txn.VEHICLE_TYPE
    left join MSTB_MASTER_TABLE vtt on vtt.MASTER_NO = txn.TRIP_TYPE
	left join MSTB_MASTER_TABLE main_saluatation on contact_person.MAIN_CONTACT_SAL = main_saluatation.MASTER_NO
	left join MSTB_MASTER_TABLE sub_saluatation on contact_person.SUB_CONTACT_SAL = sub_saluatation.MASTER_NO
    left join BMTB_INVOICE_TXN inv_txn on inv_txn.ACQUIRE_TXN_NO = txn.ACQUIRE_TXN_NO
    left join BMTB_INVOICE_DETAIL inv_dtl on inv_dtl.INVOICE_DETAIL_NO = inv_txn.INVOICE_DETAIL_NO
    left join BMTB_INVOICE_SUMMARY inv_sum on inv_sum.INVOICE_SUMMARY_NO = inv_dtl.INVOICE_SUMMARY_NO
    left join BMTB_INVOICE_HEADER inv_hdr on inv_hdr.INVOICE_HEADER_NO = inv_sum.INVOICE_HEADER_NO
    left join MSTB_MASTER_TABLE job_type_master on txn.JOB_TYPE = job_type_master.MASTER_NO
	where
	    (:entity is null
	    or entity.ENTITY_NO = :entity)
	and
	    (:accountNo is null
	    or gp_acct.cust_no = :accountNo
	    or p_acct.cust_no = :accountNo
	    or acct.cust_no = :accountNo)
	and
	    (:accountName is null
	    or acct.ACCOUNT_NAME like :accountName
	    or p_acct.ACCOUNT_NAME like :accountName
	    or gp_acct.ACCOUNT_NAME like :accountName)
	and
	    (:division is null
	    or p_acct.account_no = :division
		or acct.account_no = :division)
	and
	    (:department is null
	    or acct.account_no = :department)
	and
	    (:productType is null
	    or txn.PRODUCT_TYPE_ID = :productType)
	and
	    (
	    	(:startDate is null and :endDate is null)
	    	or (
	    		txn.TRIP_START_DT between 
	    			case when :startDate is null then to_date(:endDate, 'yyyy-mm-dd hh24:mi:ss') 
	    					else to_date(:startDate, 'yyyy-mm-dd hh24:mi:ss') end 
	    			and 
	    			case when :endDate is null then to_date(:startDate, 'yyyy-mm-dd hh24:mi:ss') 
	    					else to_date(:endDate, 'yyyy-mm-dd hh24:mi:ss') end)
	    		)
	and
	    (
	    	(:uploadStartDate is null and :uploadEndDate is null)
	    	or (
	    		txn.CREATED_DT between 
	    			case when :uploadStartDate is null then to_date(:uploadEndDate, 'yyyy-mm-dd hh24:mi:ss') 
	    					else to_date(:uploadStartDate, 'yyyy-mm-dd hh24:mi:ss') end 
	    			and 
	    			case when :uploadEndDate is null then to_date(:uploadStartDate, 'yyyy-mm-dd hh24:mi:ss') 
	    					else to_date(:uploadEndDate, 'yyyy-mm-dd hh24:mi:ss') end)
	    		)
	and
	    (:companyCode is null
	    or comp_code.MASTER_TYPE = 'SPR'
	    and comp_code.MASTER_CODE = :companyCode
	    )
	and
	    (:txnStatus is null
	    or txn.TXN_STATUS = :txnStatus)
	order by
		case when :sortBy = 'AO' then to_number(account_no) end,
	    case when :sortBy = 'AO' then ACCOUNT_TYPE_SORTING end,
	    case when :sortBy = 'AO' then division_code end,
	    case when :sortBy = 'AO' then department_code end,
	    case when :sortBy = 'AO' then txn.TRIP_START_DT end,
	    
	    case when :sortBy = 'AN' then acct.ACCOUNT_NAME end,
	    case when :sortBy = 'AN' then to_number(acct.cust_no) end,
	    case when :sortBy = 'AN' then ACCOUNT_TYPE_SORTING end,
	    case when :sortBy = 'AN' then division_code end,
	    case when :sortBy = 'AN' then department_code end,
	    case when :sortBy = 'AN' then txn.TRIP_START_DT end,
	    
	    case when :sortBy = 'TD' then txn.TRIP_START_DT end,
	    case when :sortBy = 'TD' then trip_time end,
	    case when :sortBy = 'TD' then ACCOUNT_TYPE_SORTING end,
	    case when :sortBy = 'TD' then division_code end,
	    case when :sortBy = 'TD' then department_code end,
	    case when :sortBy = 'TD' then txn.TRIP_START_DT end,
	    
	    case when :sortBy = 'UD' then txn.CREATED_DT end,
	    case when :sortBy = 'UD' then acct.ACCOUNT_NAME end,
	    case when :sortBy = 'UD' then to_number(account_no) end,
	    case when :sortBy = 'UD' then division_code end,
	    case when :sortBy = 'UD' then department_code end,
	    case when :sortBy = 'UD' then txn.TRIP_START_DT end
	  
	    )where rownum <= (
			select MAX(MASTER_VALUE) from MSTB_MASTER_TABLE where MASTER_TYPE = 'MRR' and MASTER_STATUS = 'A'
		)
	]]>
</sql-query>

</hibernate-mapping>