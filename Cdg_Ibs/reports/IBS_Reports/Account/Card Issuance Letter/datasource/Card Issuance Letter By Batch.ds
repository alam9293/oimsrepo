<?xml version="1.0" encoding="UTF-8"?>
<ds:datasource xmlns:ds="http://www.elixirtech.com/DataSource" name="Card Issuance Letter By Batch" type="JDBC" description="">
  <ds:schema case-sensitive="Yes">
    <ds:column name="CONTACT_PERSON_NO" type="Double">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="DUMMY_HEADER" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCOUNT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCOUNT_NO" type="Double">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="ACCOUNTNAMECODE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="START_CARD_NO" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="END_CARD_NO" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="NUMBER_OF_DIGIT" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CUSTID" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CUSTNAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="MAIN_CONTACT_TITLE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="MAIN_CONTACT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="SUB_CONTACT_TITLE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="SUB_CONTACT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCT_CATEGORY" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="PRODUCT_TYPE_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EMAIL" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="FAX" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PHONES" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="POSTAL" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="ADDRESS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
  </ds:schema>
  <ds:security />
  <ds:jdbc connection-type="POOL" connection-pool="/IBS_Reports/ConnectionPool/IBS Connection Pool.pool" connection-pool-timeout="0" callable-statement="No" connection-reuse="0" nulls-to-strings="No" read-only="Yes" auto-commit="Yes">
    <ds:sql>
    WITH p AS
	(
	 select /*+ materialize */ to_number(case when type.ONE_TIME_USAGE = 'Y' and type.LUHN_CHECK = 'Y' then substr(product.card_no, 0, LENGTH(product.card_no)-1) else product.card_no end) as card_no, type.product_type_id, product.account_no, product.issue_date
                    from PMTB_PRODUCT product
                    inner join PMTB_PRODUCT_TYPE type on product.PRODUCT_TYPE_ID = type.PRODUCT_TYPE_ID
                    where current_status not like 'R'
                        and (('${3. Card No Start##ALTERNATE_REQUIRED}' is null and '${4. Card No End}' is null) or (to_number(card_no) between case when '${3. Card No Start##ALTERNATE_REQUIRED}' is null then '${4. Card No End}' else '${3. Card No Start##ALTERNATE_REQUIRED}' end and case when '${4. Card No End}' is null then '${3. Card No Start##ALTERNATE_REQUIRED}' else '${4. Card No End}' end))
                        and (('${5. Issue Start Date#date#ALTERNATE_REQUIRED}' is null and '${6. Issue End Date#date}' is null)or(product.issue_date between to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${6. Issue End Date#date}' is null then to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_date('${6. Issue End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end))
                        and type.product_type_id='${2. Product Type#choice(CC,OV,FV)#MASTER:PT}'
	),
	pstart as
	(
        select /*+ materialize */ p1.account_no, p1.card_no, case when product_type.ONE_TIME_USAGE = 'Y' and product_type.LUHN_CHECK = 'Y' then product_type.number_of_digit - 1 else product_type.number_of_digit end as number_of_digit, p1.product_type_id
        from p p1
        left join p p2 on p2.account_no = p1.account_no and p1.card_no = p2.card_no+1
        inner join pmtb_product_type product_type on p1.product_type_id=product_type.product_type_id
        where p2.card_no is null
    ),
    pend as
    (
        select /*+ materialize */ p1.account_no, p1.card_no, case when product_type.ONE_TIME_USAGE = 'Y' and product_type.LUHN_CHECK = 'Y' then product_type.number_of_digit - 1 else product_type.number_of_digit end as number_of_digit, p1.product_type_id
        from p p1
        left join p p2 on p2.account_no = p1.account_no and p1.card_no = p2.card_no-1
        inner join pmtb_product_type product_type on p1.product_type_id=product_type.product_type_id
        where p2.card_no is null
    )
    select
      distinct(contact_person.contact_person_no),
      'DUMMY' DUMMY_HEADER,	
      batch_issued_cards.*,
      main_parent_account.CustID CustID,
      main_parent_account.CustName CustName,
      contact_person.main_contact_title || case when sub_contact_title is null then '' else ' / ' || sub_contact_title end as main_contact_title,
      contact_person.main_contact_name || case when sub_contact_name is null then '' else ' / ' || sub_contact_name end as main_contact_name,
      contact_person.sub_contact_title sub_contact_title,
      contact_person.sub_contact_name sub_contact_name,
      acc.account_category acct_category,
      acc.account_name account_name,
      ('RECEIPT ACKNOWLEDGEMENT FOR ' || prod_type.name) product_type_name,
      case when contact_person.main_contact_email is NULL then '-' else contact_person.main_contact_email  End email,
      case when contact_person.main_contact_fax is NULL then '-' else contact_person.main_contact_fax  End fax,
      concat( concat( (case when contact_person.main_contact_tel is NULL then '' else  contact_person.main_contact_tel   End )
     , (case when (contact_person.main_contact_tel is NULL or contact_person.main_contact_mobile is Null) then '' else  ' ,'  End ))
     ,  (case when contact_person.main_contact_mobile is NULL then '' else contact_person.main_contact_mobile  End )
     )Phones,
    contact_person.address_postal as postal,
     (case when contact_person.address_area is NULL then ''
        else (contact_person.address_area || '
' ) End )||(case when contact_person.address_block is NULL then ''
        else (contact_person.address_block || ' ') End ) || (case when contact_person.address_street is NULL then ''
        else (contact_person.address_street) end) || case when contact_person.address_street is not null or contact_person.address_block is not null then ' 
' else ''  End || (case when contact_person.address_unit is NULL then '' 
        else (contact_person.address_unit || ' ') End ) || (case when contact_person.address_building is NULL then '' 
        else (contact_person.address_building) end) || case when contact_person.address_unit is not null or contact_person.address_building is not null then '
' else ''  End || (case when contact_person.address_country is NULL then '' 
        else  ( master.master_value||' ' )  End )||(case when contact_person.address_state is NULL then ''
        else  (contact_person.address_state || ' ')  End )|| (case when contact_person.address_city is NULL then ''
        else  (contact_person.address_city || ' ')  End ) || (case when contact_person.address_postal is NULL then ''
        else  contact_person.address_postal End )  address
        --main_contact.main_contact_type, main_contact.account_no, main_contact.contact_person_no--
  from 
     amtb_contact_person contact_person 
     left join amtb_acct_main_contact main_contact
        on contact_person.contact_person_no=main_contact.contact_person_no
          and main_contact.main_contact_type='S'
     left join mstb_master_table master
        on contact_person.address_country=master.master_no and master_type='CTRY'
     left join  amtb_account acc
        on acc.account_no=main_contact.account_no
     left join pmtb_product prod
        on prod.account_no=acc.account_no
     left join pmtb_product_type prod_type
        on prod.product_type_id=prod_type.product_type_id
--To retive parent account no ,customer ID--
 left join
 (
  select
    grand_parent_acc.account_name || ' (' ||grand_parent_acc.cust_no || ')' CustID, grand_parent_acc.account_name as CustName,
    grand_parent_acc.account_no account_no
  from amtb_account grand_parent_acc
  where grand_parent_acc.parent_no is null and grand_parent_acc.cust_no is not null
  union all
  select
    grand_parent_acc.account_name || ' (' ||grand_parent_acc.cust_no || ')' CustID, grand_parent_acc.account_name as CustName,
    parent_acc.account_no account_no
  from amtb_account grand_parent_acc
  left join amtb_account parent_acc
    on parent_acc.parent_no=grand_parent_acc.account_no
  where grand_parent_acc.parent_no is null and grand_parent_acc.cust_no is not null
  and parent_acc.parent_no=grand_parent_acc.account_no 
  and parent_acc.account_category in ('SUBAPPL','DIV')
  union all
  select
    grand_parent_acc.account_name || ' (' ||grand_parent_acc.cust_no || ')' CustID, grand_parent_acc.account_name as CustName,
    child_acc.account_no account_no
  from amtb_account grand_parent_acc
  left join amtb_account parent_acc
    on parent_acc.parent_no=grand_parent_acc.account_no
  left join amtb_account child_acc
    on child_acc.parent_no=parent_acc.account_no
  where grand_parent_acc.parent_no is null and grand_parent_acc.cust_no is not null
  and parent_acc.parent_no=grand_parent_acc.account_no 
  and child_acc.account_category in ('DEPT')
  ) main_parent_account
      on  main_parent_account.account_no=acc.account_no

--ISSUED CARDS BY BATCH QUERy--
left join
(
    select acct.account_name, acct.account_no,
        case when acct.cust_no is not NULL then '-' else case when parent.ACCOUNT_NO is not null and parent.CUST_NO is null then parent.ACCOUNT_NAME || '(' || parent.CODE || ')' || ' / ' else '' end || acct.account_name || ' (' || acct.code  ||')' end AccountNameCode,
        case when product_type.ONE_TIME_USAGE = 'Y' and product_type.LUHN_CHECK = 'Y' then substr(prod.start_card_no, 0, 6) || ' ' || substr(prod.start_card_no, 7, LENGTH(prod.start_card_no)-6) || ' L' else prod.start_card_no end as START_CARD_NO,
        case when product_type.ONE_TIME_USAGE = 'Y' and product_type.LUHN_CHECK = 'Y' then substr(prod.end_card_no, 0, 6) || ' ' || substr(prod.end_card_no, 7, LENGTH(prod.end_card_no)-6) || ' L' else prod.end_card_no end as END_CARD_NO,
        account_main_contact.contact_person_no, prod.number_of_digit
        from amtb_account acct
        left join amtb_account parent on acct.PARENT_NO = parent.ACCOUNT_NO
        inner join (
            select pstart.account_no, pstart.product_type_id, pstart.number_of_digit as number_of_digit, lpad(pstart.card_no, pstart.number_of_digit, '0') start_card_no,
                lpad(min(pend.card_no), pstart.number_of_digit, '0') end_card_no
            from  pstart
            inner join pend on pend.account_no = pstart.account_no and pstart.card_no &lt;= pend.card_no
            group by pstart.account_no, pstart.card_no, pstart.number_of_digit, pstart.product_type_id
        ) prod on prod.account_no = acct.account_no and prod.product_type_id='${2. Product Type#choice(CC,OV,FV)#MASTER:PT}'
        inner join amtb_acct_main_contact account_main_contact on account_main_contact.account_no=acct.account_no and account_main_contact.main_contact_type='S'
        inner join PMTB_PRODUCT_TYPE product_type on product_type.PRODUCT_TYPE_ID = prod.PRODUCT_TYPE_ID
    ) batch_issued_cards
on batch_issued_cards.account_no=acc.account_no
and batch_issued_cards.contact_person_no=contact_person.contact_person_no
left join PMTB_PRODUCT_REPLACEMENT replacement on replacement.PRODUCT_NO = prod.PRODUCT_NO
--END OF CODE--

--Account Search Criteria--
  where acc. account_no in
 (
select ACCOUNT_NO from AMTB_ACCOUNT
    where CUST_NO like '%${01a. Account No#acctsearch#custId}%' and ACCOUNT_NAME like '%${01b. Name#acctsearch#custName}%' and CUST_NO is not null and '${01c. Division#acctsearch#div}' is null
union
select child.ACCOUNT_NO from AMTB_ACCOUNT acct
    left join AMTB_ACCOUNT child on acct.ACCOUNT_NO = child.PARENT_NO
    where acct.CUST_NO like '%${01a. Account No#acctsearch#custId}%' and acct.ACCOUNT_NAME like '%${01b. Name#acctsearch#custName}%' and child.ACCOUNT_NO is not null and ('${01c. Division#acctsearch#div}' is null or child.ACCOUNT_NO = '${01c. Division#acctsearch#div}') and '${01d. Department#acctsearch#dept}' is null
union
select grand.ACCOUNT_NO from AMTB_ACCOUNT acct
    left join AMTB_ACCOUNT child on acct.ACCOUNT_NO = child.PARENT_NO
    left join AMTB_ACCOUNT grand on child.ACCOUNT_NO = grand.PARENT_NO
    where acct.CUST_NO like '%${01a. Account No#acctsearch#custId}%' and acct.ACCOUNT_NAME like '%${01b. Name#acctsearch#custName}%' and grand.ACCOUNT_NO is not null and ('${01c. Division#acctsearch#div}' is null or child.ACCOUNT_NO = '${01c. Division#acctsearch#div}') and ('${01d. Department#acctsearch#dept}' is null or grand.ACCOUNT_NO = '${01d. Department#acctsearch#dept}')

)

  --The following code will be changed by card no range.--
  --and to_number(prod.card_no)&gt;1000 and to_number(prod.card_no)&lt;10000--
and prod_type.product_type_id='${2. Product Type#choice(CC,OV,FV)#MASTER:PT3}'

and (
    ('${5. Issue Start Date#date#ALTERNATE_REQUIRED}' is null and '${6. Issue End Date#date}' is null and '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' is null and '${8. Replacement End Date#date}' is null)
    or (('${5. Issue Start Date#date#ALTERNATE_REQUIRED}' is not null or '${6. Issue End Date#date}' is not null) and (prod.issue_date between to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${6. Issue End Date#date}' is null then to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_date('${6. Issue End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end))
    or (('${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' is not null or '${8. Replacement End Date#date}' is not null) and (replacement.replacement_date between to_date('${7. Replacement Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${8. Replacement End Date#date}' is null then to_date('${7. Replacement Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_date('${8. Replacement End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end))
)
and batch_issued_cards.START_CARD_NO is not null and batch_issued_cards.END_CARD_NO is not null

  order by  contact_person.contact_person_no,batch_issued_cards.start_card_no</ds:sql>
  </ds:jdbc>
</ds:datasource>

