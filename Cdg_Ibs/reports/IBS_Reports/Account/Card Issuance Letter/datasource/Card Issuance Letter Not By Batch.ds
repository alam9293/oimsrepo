<?xml version="1.0" encoding="UTF-8"?>
<ds:datasource xmlns:ds="http://www.elixirtech.com/DataSource" name="Card Issuance Letter Not By Batch" type="JDBC" description="">
  <ds:schema case-sensitive="Yes">
    <ds:column name="CONTACT_PERSON_NO" type="Double">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="DUMMY_HEADER" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CUSTID" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CUSTNAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="MAIN_CONTACT_TITLE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="MAIN_CONTACT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="SUB_CONTACT_TITLE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="SUB_CONTACT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="POSTAL" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="ACCT_CATEGORY" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="ACCOUNT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CARD_NO" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="EXPRIY" type="Date">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="NAME_ON_PRODUCT" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="REMARKS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCOUNTNAMECODE" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PRODUCT_TYPE_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EMAIL" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="FAX" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PHONES" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCT_CAT_ORDER" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PREPAID" type="String" />
  </ds:schema>
  <ds:security />
  <ds:jdbc connection-type="POOL" connection-pool="/IBS_Reports/ConnectionPool/IBS Connection Pool.pool" connection-pool-timeout="0" callable-statement="No" connection-reuse="0" nulls-to-strings="No" read-only="Yes" auto-commit="Yes">
    <ds:sql>WITH all_remarks AS
  (
    SELECT status_dt AS max_dt,
      prod_status.product_no,
      case when product_type.prepaid='Y' THEN 'NEW PREPAID CARD' ELSE 'NEW CARD' END AS remarks, 1 as precedence
    FROM
      (
        SELECT MAX(status_dt) AS max_dt,
          product_no
        FROM pmtb_product_status
        WHERE status_dt
          &lt;
        sysdate AND
        (
          status_from IN ('N','R') AND status_to IN ('U','A','S')
        )
        group by product_no
      )
      max_status_remarks 
      inner join pmtb_product_status prod_status ON max_status_remarks.max_dt= prod_status.status_dt AND prod_status.product_no=max_status_remarks.product_no
      left join pmtb_product product on product.product_no = prod_status.product_no
	  left JOIN pmtb_product_type product_type on product.product_type_id=product_type.product_type_id
      WHERE
      (
        (
          (
            '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${6. Issue End Date#date}' IS NULL AND '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${8. Replacement End Date#date}' IS NULL
          )
        )
        OR
        (
          (
            '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NOT NULL OR '${6. Issue End Date#date}' IS NOT NULL
          )
          AND
          (
            prod_status.status_dt BETWEEN
            CASE
            WHEN '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NULL THEN
              to_date('${6. Issue End Date#date} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
            ELSE
              to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
            END AND
            CASE
            WHEN '${6. Issue End Date#date}' IS NULL THEN
              to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
            ELSE
              to_date('${6. Issue End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
            END
          )
        )
      )
      AND PRODUCT.CARD_NO NOT IN (select new_card_no from pmtb_product_replacement where current_card_no!=new_card_no)
      UNION ALL
      SELECT prod_replacenent_status.created_dt AS max_dt,
        new_replaced_card.product_no,
        master.master_value AS remarks, 2 as precedence
      FROM
        (
          SELECT MAX(created_dt) AS max_dt ,
            new_card_no
          FROM pmtb_product_replacement
          WHERE 
		  replacement_reason !=-1 and
		  created_dt
            &lt;
          sysdate group by new_card_no
        )
        max_replacement_status_remarks 
		inner join pmtb_product_replacement prod_replacenent_status ON max_replacement_status_remarks.max_dt= prod_replacenent_status.created_dt AND prod_replacenent_status.new_card_no=max_replacement_status_remarks.new_card_no AND prod_replacenent_status.replacement_reason !=-1
		inner join pmtb_product new_replaced_card ON max_replacement_status_remarks.new_card_no = new_replaced_card.card_no inner join mstb_master_table master ON prod_replacenent_status.replacement_reason = master.master_no 
		WHERE
        (
          (
            (
              '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${6. Issue End Date#date}' IS NULL AND '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${8. Replacement End Date#date}' IS NULL
            )
          )
          OR
          (
            (
              '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' IS NOT NULL OR '${8. Replacement End Date#date}' IS NOT NULL
            )
            AND
            (
              prod_replacenent_status.REPLACEMENT_DATE BETWEEN
              CASE
              WHEN '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' IS NULL THEN
                to_date('${8. Replacement End Date#date} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
              ELSE
                to_date('${7. Replacement Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
              END AND
              CASE
              WHEN '${8. Replacement End Date#date}' IS NULL THEN
                to_date('${7. Replacement Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
              ELSE
                to_date('${8. Replacement End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
              END
            )
            AND NOT
            (
              master.MASTER_TYPE = 'RR' AND master.MASTER_CODE = 'NPPC'
            )
          )
        )
        UNION ALL
        SELECT prod_renew_status.created_dt AS max_dt,
          prod_renew_status.product_no,
          'CARD RENEWAL' AS remarks, 3 as precedence
        FROM
          (
            SELECT MAX(created_dt) AS max_dt,
              product_no
            FROM pmtb_product_renew
            WHERE created_dt
              &lt;
            sysdate group by product_no
          )
          max_renew_status_remarks inner join pmtb_product_renew prod_renew_status ON max_renew_status_remarks.max_dt= prod_renew_status.created_dt AND prod_renew_status.product_no=max_renew_status_remarks.product_no inner join pmtb_product renew_product ON prod_renew_status.product_no = renew_product.product_no WHERE
          (
            (
              (
                '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${6. Issue End Date#date}' IS NULL AND '${7. Replacement Start Date#date#ALTERNATE_REQUIRED}' IS NULL AND '${8. Replacement End Date#date}' IS NULL
              )
            )
            OR
            (
              (
                '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NOT NULL OR '${6. Issue End Date#date}' IS NOT NULL
              )
              AND
              (
                prod_renew_status.renew_date BETWEEN
                CASE
                WHEN '${5. Issue Start Date#date#ALTERNATE_REQUIRED}' IS NULL THEN
                  to_date('${6. Issue End Date#date} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                ELSE
                  to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss')
                END AND
                CASE
                WHEN '${6. Issue End Date#date}' IS NULL THEN
                  to_date('${5. Issue Start Date#date#ALTERNATE_REQUIRED} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
                ELSE
                  to_date('${6. Issue End Date#date} 23:59:59', 'yyyy-mm-dd hh24:mi:ss')
                END
              )
            )
          )
  )
  SELECT DISTINCT(contact_person.contact_person_no),
    'DUMMY' DUMMY_HEADER,
    main_parent_account.CustID CustID,
    main_parent_account.CustName CustName,
    contact_person.main_contact_title
    ||
    CASE
      WHEN sub_contact_title IS NULL
      THEN ''
      ELSE ' / '
        || sub_contact_title
    END AS main_contact_title,
    contact_person.main_contact_name
    ||
    CASE
      WHEN sub_contact_name IS NULL
      THEN ''
      ELSE ' / '
        || sub_contact_name
    END AS main_contact_name,
    contact_person.sub_contact_title sub_contact_title,
    contact_person.sub_contact_name sub_contact_name,
    contact_person.address_postal AS postal,
    acc.account_category acct_category,
    acc.account_name account_name,
    prod.card_no card_no,
    prod.expiry_date expriy,
    prod.name_on_product,
    prod_type.prepaid,
    product_remark.remarks,
    CASE
      WHEN acc.cust_no IS NOT NULL
      THEN '-'
      ELSE
        CASE
          WHEN parent.ACCOUNT_NO IS NOT NULL
          AND parent.CUST_NO     IS NULL
          THEN parent.ACCOUNT_NAME
            || '('
            || parent.CODE
            || ')'
            || ' / '
          ELSE ''
        END
        || acc.account_name
        || ' ('
        || acc.code
        ||')'
    END AccountNameCode,
    ('RECEIPT ACKNOWLEDGEMENT FOR '
    || prod_type.name) product_type_name,
    CASE
      WHEN contact_person.main_contact_email IS NULL
      THEN '-'
      ELSE contact_person.main_contact_email
    END email,
    CASE
      WHEN contact_person.main_contact_fax IS NULL
      THEN '-'
      ELSE contact_person.main_contact_fax
    END fax,
    concat( concat( (
        CASE
          WHEN contact_person.main_contact_tel IS NULL
          THEN ''
          ELSE contact_person.main_contact_tel
        END), (
        CASE
          WHEN
            (
              contact_person.main_contact_tel     IS NULL
            OR contact_person.main_contact_mobile IS NULL
            )
          THEN ''
          ELSE ' ,'
        END)), (
      CASE
        WHEN contact_person.main_contact_mobile IS NULL
        THEN ''
        ELSE contact_person.main_contact_mobile
      END))Phones,
    (
      CASE
        WHEN contact_person.address_area IS NULL
        THEN ''
        ELSE (contact_person.address_area
          || ' 
' )
      END )
    ||(
      CASE
        WHEN contact_person.address_block IS NULL
        THEN ''
        ELSE (contact_person.address_block
          || ' ')
      END )
    || (
      CASE
        WHEN contact_person.address_street IS NULL
        THEN ''
        ELSE (contact_person.address_street)
      END)
    ||
    CASE
      WHEN contact_person.address_street IS NOT NULL
      OR contact_person.address_block    IS NOT NULL
      THEN ' 
'
      ELSE ''
    END
    || (
      CASE
        WHEN contact_person.address_unit IS NULL
        THEN ''
        ELSE (contact_person.address_unit
          || ' ')
      END )
    || (
      CASE
        WHEN contact_person.address_building IS NULL
        THEN ''
        ELSE (contact_person.address_building)
      END)
    ||
    CASE
      WHEN contact_person.address_unit   IS NOT NULL
      OR contact_person.address_building IS NOT NULL
      THEN ' 
'
      ELSE ''
    END
    || (
      CASE
        WHEN contact_person.address_country IS NULL
        THEN ''
        ELSE ( master.master_value
          ||' ' )
      END )
    ||(
      CASE
        WHEN contact_person.address_state IS NULL
        THEN ''
        ELSE (contact_person.address_state
          || ' ')
      END )
    || (
      CASE
        WHEN contact_person.address_city IS NULL
        THEN ''
        ELSE (contact_person.address_city
          || ' ')
      END )
    || (
      CASE
        WHEN contact_person.address_postal IS NULL
        THEN ''
        ELSE contact_person.address_postal
      END ) address,
    CASE
      WHEN acc.account_category = 'CORP'
      OR acc.account_category   = 'APP'
      THEN 1
      WHEN acc.account_category = 'DIV'
      OR acc.account_category   = 'SAPP'
      THEN 2
      ELSE 3
    END AS acct_cat_order
  FROM amtb_contact_person contact_person
  LEFT JOIN amtb_acct_main_contact main_contact
  ON contact_person.contact_person_no=main_contact.contact_person_no
  AND main_contact.main_contact_type ='S'
  LEFT JOIN mstb_master_table master
  ON contact_person.address_country=master.master_no
  AND master_type                  ='CTRY'
  LEFT JOIN amtb_account acc
  ON acc.account_no=main_contact.account_no
  LEFT JOIN pmtb_product prod
  ON prod.account_no=acc.account_no
  AND prod.CURRENT_STATUS NOT LIKE 'T'
  LEFT JOIN amtb_account parent
  ON parent.account_no = acc.parent_no
  LEFT JOIN pmtb_product_type prod_type
  ON prod.product_type_id=prod_type.product_type_id
  INNER JOIN
    (
      SELECT distinct all_latest_remarks.product_no, first_value(all_latest_remarks.remarks) over (Partition by all_latest_remarks.product_no order by all_latest_remarks.precedence, all_latest_remarks.max_dt ) as remarks
      FROM (all_remarks) all_latest_remarks
    )
    product_remark
  ON product_remark.product_no=prod.product_no
  LEFT JOIN
    (
      SELECT grand_parent_acc.account_name
        || ' ('
        ||grand_parent_acc.cust_no
        || ')' CustID,
        grand_parent_acc.account_name AS CustName,
        grand_parent_acc.account_no account_no
      FROM amtb_account grand_parent_acc
      WHERE grand_parent_acc.parent_no IS NULL
      AND grand_parent_acc.cust_no     IS NOT NULL
      UNION ALL
      SELECT grand_parent_acc.account_name
        || ' ('
        ||grand_parent_acc.cust_no
        || ')' CustID,
        grand_parent_acc.account_name AS CustName,
        parent_acc.account_no account_no
      FROM amtb_account grand_parent_acc
      LEFT JOIN amtb_account parent_acc
      ON parent_acc.parent_no           =grand_parent_acc.account_no
      WHERE grand_parent_acc.parent_no IS NULL
      AND grand_parent_acc.cust_no     IS NOT NULL
      AND parent_acc.parent_no          =grand_parent_acc.account_no
      AND parent_acc.account_category  IN ('SAPP','DIV')
      UNION ALL
      SELECT grand_parent_acc.account_name
        || ' ('
        ||grand_parent_acc.cust_no
        || ')' CustID,
        grand_parent_acc.account_name AS CustName,
        child_acc.account_no account_no
      FROM amtb_account grand_parent_acc
      LEFT JOIN amtb_account parent_acc
      ON parent_acc.parent_no=grand_parent_acc.account_no
      LEFT JOIN amtb_account child_acc
      ON child_acc.parent_no            =parent_acc.account_no
      WHERE grand_parent_acc.parent_no IS NULL
      AND grand_parent_acc.cust_no     IS NOT NULL
      AND parent_acc.parent_no          =grand_parent_acc.account_no
      AND child_acc.account_category   IN ('DEPT')
    )
    main_parent_account ON main_parent_account.account_no=acc.account_no
  LEFT JOIN PMTB_PRODUCT_REPLACEMENT replacement
  ON replacement.PRODUCT_NO = prod.PRODUCT_NO
  WHERE acc. account_no    IN
    (
      SELECT ACCOUNT_NO
      FROM AMTB_ACCOUNT
      WHERE CUST_NO LIKE '%${01a. Account No#acctsearch#custId}%'
      AND ACCOUNT_NAME LIKE '%${01b. Name#acctsearch#custName}%'
      AND CUST_NO                           IS NOT NULL
      AND '${01c. Division#acctsearch#div}' IS NULL
      UNION
      SELECT child.ACCOUNT_NO
      FROM AMTB_ACCOUNT acct
      LEFT JOIN AMTB_ACCOUNT child
      ON acct.ACCOUNT_NO = child.PARENT_NO
      WHERE acct.CUST_NO LIKE '%${01a. Account No#acctsearch#custId}%'
      AND acct.ACCOUNT_NAME LIKE '%${01b. Name#acctsearch#custName}%'
      AND child.ACCOUNT_NO IS NOT NULL
      AND
        (
          '${01c. Division#acctsearch#div}' IS NULL
        OR child.ACCOUNT_NO                  = '${01c. Division#acctsearch#div}'
        )
      AND '${01d. Department#acctsearch#dept}' IS NULL
      UNION
      SELECT grand.ACCOUNT_NO
      FROM AMTB_ACCOUNT acct
      LEFT JOIN AMTB_ACCOUNT child
      ON acct.ACCOUNT_NO = child.PARENT_NO
      LEFT JOIN AMTB_ACCOUNT grand
      ON child.ACCOUNT_NO = grand.PARENT_NO
      WHERE acct.CUST_NO LIKE '%${01a. Account No#acctsearch#custId}%'
      AND acct.ACCOUNT_NAME LIKE '%${01b. Name#acctsearch#custName}%'
      AND grand.ACCOUNT_NO IS NOT NULL
      AND
        (
          '${01c. Division#acctsearch#div}' IS NULL
        OR child.ACCOUNT_NO                  = '${01c. Division#acctsearch#div}'
        )
      AND
        (
          '${01d. Department#acctsearch#dept}' IS NULL
        OR grand.ACCOUNT_NO                     = '${01d. Department#acctsearch#dept}'
        )
    )
  AND prod_type.product_type_id='${2. Product Type#choice(CC,PC,OV,FV)#MASTER:PT}'
  AND
    (
      (
        '${3. Card No Start##ALTERNATE_REQUIRED}' IS NULL
      AND '${4. Card No End}'                     IS NULL
      )
    OR
      (
        to_number(prod.card_no) BETWEEN
        CASE
          WHEN '${3. Card No Start##ALTERNATE_REQUIRED}' IS NULL
          THEN '${4. Card No End}'
          ELSE '${3. Card No Start##ALTERNATE_REQUIRED}'
        END
      AND
        CASE
          WHEN '${4. Card No End}' IS NULL
          THEN '${3. Card No Start##ALTERNATE_REQUIRED}'
          ELSE '${4. Card No End}'
        END
      )
    )
  ORDER BY contact_person_no,
    acct_cat_order,
    acc.account_name,
    prod.card_no</ds:sql>
  </ds:jdbc>
</ds:datasource>

