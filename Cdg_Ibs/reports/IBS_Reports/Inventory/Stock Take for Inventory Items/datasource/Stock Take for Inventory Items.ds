<?xml version="1.0" encoding="UTF-8"?>
<ds:datasource xmlns:ds="http://www.elixirtech.com/DataSource" name="Stock Take for Inventory Items" type="JDBC" description="">
  <ds:schema case-sensitive="Yes">
    <ds:column name="TYPE_NAME" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="START_SERIAL" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="END_SERIAL" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="COUNT_SERIAL" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PRICE" type="Double">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="TOTAL_PRICE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
  </ds:schema>
  <ds:security />
  <ds:jdbc connection-type="POOL" connection-pool="/IBS_Reports/ConnectionPool/IBS Connection Pool.pool" connection-pool-timeout="0" callable-statement="No" connection-reuse="0" nulls-to-strings="No" read-only="Yes" auto-commit="Yes">
    <ds:sql>select
  generated.TYPE_NAME,
  generated.AVAILABLE_START as start_serial,
  generated.AVAILABLE_END as end_serial,
  generated.AVAILABLE_END - generated.AVAILABLE_START + 1 as count_serial,
  generated.PRICE, generated.PRICE * (generated.AVAILABLE_END - generated.AVAILABLE_START + 1) as total_price 
from
     (
      
      select stock_in.ITEM_TYPE_NO, case when issue_end.SERIAL_NO_END is null then stock_in.SERIAL_NO_START else issue_end.SERIAL_NO_END+1 end as available_start, case when issue_tail.SERIAL_NO_TAIL is null then stock_in.SERIAL_NO_END else issue_tail.SERIAL_NO_TAIL-1 end as available_end,type.TYPE_NAME,type.PRICE
      from IMTB_STOCK stock_in
      left join IMTB_STOCK issue_end on stock_in.ITEM_TYPE_NO = issue_end.ITEM_TYPE_NO and issue_end.TXN_TYPE = 'S' and (issue_end.SERIAL_NO_START between stock_in.SERIAL_NO_START and stock_in.SERIAL_NO_END or issue_end.SERIAL_NO_END between	stock_in.SERIAL_NO_START and stock_in.SERIAL_NO_END) and issue_end.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
      left join (
        SELECT DISTINCT issue.STOCK_NO,
        first_value(issue2.SERIAL_NO_START) OVER (PARTITION BY issue.STOCK_NO ORDER BY issue2.SERIAL_NO_START) AS SERIAL_NO_TAIL
        FROM IMTB_STOCK stock
        inner join IMTB_STOCK issue on stock.TXN_TYPE = 'I' and issue.TXN_TYPE = 'S' and stock.ITEM_TYPE_NO = issue.ITEM_TYPE_NO and issue.SERIAL_NO_END between stock.SERIAL_NO_START and stock.SERIAL_NO_END and issue.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
        left join IMTB_STOCK issue2 on issue2.TXN_TYPE = 'S' and issue2.ITEM_TYPE_NO = stock.ITEM_TYPE_NO and issue2.SERIAL_NO_START &gt; issue.SERIAL_NO_END 
        and ((issue2.SERIAL_NO_START between stock.SERIAL_NO_START and stock.SERIAL_NO_END)
        	or (issue2.SERIAL_NO_END between stock.SERIAL_NO_START and stock.SERIAL_NO_END))
        and issue2.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
        where stock.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
      ) issue_tail on issue_tail.STOCK_NO = issue_end.STOCK_NO
          left join IMTB_ISSUE issue on issue_tail.STOCK_NO = issue.STOCK_NO
          left join IMTB_ISSUE_REQ issue_req on issue.ISSUE_NO = issue_req.ISSUE_REQ_NO
          left join AMTB_ACCOUNT acct on issue_req.ACCOUNT_NO = acct.ACCOUNT_NO
          left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
          left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
             left join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
             left join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
       inner join IMTB_ITEM_TYPE type on type.ITEM_TYPE_NO = stock_in.ITEM_TYPE_NO
          left join (select ITEM_TYPE_NO,
           sum(case when TXN_TYPE = 'I' then (SERIAL_NO_END - SERIAL_NO_START + 1) when TXN_TYPE = 'S' then (SERIAL_NO_START - SERIAL_NO_END - 1) end) as opening_balance
           from IMTB_STOCK
           where '${1. Stock Take Date#date()#REQUIRED}' is null or to_timestamp('${1. Stock Take Date#date()#REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') &gt; txn_dt
           group by ITEM_TYPE_NO
        ) balance on balance.ITEM_TYPE_NO = type.ITEM_TYPE_NO
      where 
      stock_in.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
      and stock_in.TXN_TYPE = 'I'
      and case when issue_end.SERIAL_NO_END is null then stock_in.SERIAL_NO_START else issue_end.SERIAL_NO_END+1 end &lt; case when issue_tail.SERIAL_NO_TAIL is null then stock_in.SERIAL_NO_END else issue_tail.SERIAL_NO_TAIL-1 end
       and ('${3. Item Type#choice(1,2,3,4,6)#MASTER:IT}' is null or type.ITEM_TYPE_NO = '${3. Item Type#choice(1,2,3,4,6)#MASTER:IT}')
       and ('${4. Entity#choice(1,2,3)#MASTER:EM}' is null or entity.entity_no = '${4. Entity#choice(1,2,3)#MASTER:EM}')
      union
    
      select 
      stock_in.ITEM_TYPE_NO, 
      case when issue_head.SERIAL_NO_HEAD is null then stock_in.SERIAL_NO_START else issue_head.SERIAL_NO_HEAD+1 end as available_start, 
      case when issue_end.SERIAL_NO_START is null then stock_in.SERIAL_NO_END else issue_end.SERIAL_NO_START-1 end as available_end,
      type.TYPE_NAME,type.PRICE
      from IMTB_STOCK stock_in
      left join IMTB_STOCK issue_end 
	on stock_in.ITEM_TYPE_NO = issue_end.ITEM_TYPE_NO 
	and issue_end.TXN_TYPE = 'S' 
	and (issue_end.SERIAL_NO_START between stock_in.SERIAL_NO_START and stock_in.SERIAL_NO_END 
		or issue_end.SERIAL_NO_END between stock_in.SERIAL_NO_START and stock_in.SERIAL_NO_END) 
	and issue_end.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
      left join (
        SELECT DISTINCT issue.STOCK_NO, 
        first_value(issue2.SERIAL_NO_END) OVER (PARTITION BY issue.STOCK_NO ORDER BY issue2.SERIAL_NO_END DESC) AS SERIAL_NO_HEAD
        FROM IMTB_STOCK stock
        inner join IMTB_STOCK issue on stock.TXN_TYPE = 'I' and issue.TXN_TYPE = 'S' and stock.ITEM_TYPE_NO = issue.ITEM_TYPE_NO and issue.SERIAL_NO_START between stock.SERIAL_NO_START and stock.SERIAL_NO_END and issue.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
        left join IMTB_STOCK issue2 on issue2.TXN_TYPE = 'S' and issue2.ITEM_TYPE_NO = stock.ITEM_TYPE_NO and issue2.SERIAL_NO_END &lt; issue.SERIAL_NO_START
        and ((issue2.SERIAL_NO_START between stock.SERIAL_NO_START and stock.SERIAL_NO_END)
        	or (issue2.SERIAL_NO_END between stock.SERIAL_NO_START and stock.SERIAL_NO_END))
        and issue2.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
	where stock.TXN_DT &gt;= to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss')
      ) issue_head on issue_head.STOCK_NO = issue_end.STOCK_NO
          left join IMTB_ISSUE issue on issue_head.STOCK_NO = issue.STOCK_NO
          left join IMTB_ISSUE_REQ issue_req on issue.ISSUE_NO = issue_req.ISSUE_REQ_NO
          left join AMTB_ACCOUNT acct on issue_req.ACCOUNT_NO = acct.ACCOUNT_NO
          left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
          left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
             left join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
             left join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
      inner join IMTB_ITEM_TYPE type on type.ITEM_TYPE_NO = stock_in.ITEM_TYPE_NO
          left join (select ITEM_TYPE_NO,
           sum(case when TXN_TYPE = 'I' then (SERIAL_NO_END - SERIAL_NO_START + 1) when TXN_TYPE = 'S' then (SERIAL_NO_START - SERIAL_NO_END - 1) end) as opening_balance
           from IMTB_STOCK
           where '${1. Stock Take Date#date()#REQUIRED}' is null or to_timestamp('${1. Stock Take Date#date()#REQUIRED} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') &gt; txn_dt
           group by ITEM_TYPE_NO
        ) balance on balance.ITEM_TYPE_NO = type.ITEM_TYPE_NO
      where
      stock_in.TXN_DT between to_timestamp('2011-11-30 00:00:00','yyyy-mm-dd hh24:mi:ss') AND to_timestamp('${1. Stock Take Date#date()#REQUIRED} 23:59:59','yyyy-mm-dd hh24:mi:ss')
      AND stock_in.TXN_TYPE = 'I'
      and case when issue_head.SERIAL_NO_HEAD is null then stock_in.SERIAL_NO_START else issue_head.SERIAL_NO_HEAD+1 end &lt;= case when issue_end.SERIAL_NO_START is null then stock_in.SERIAL_NO_END else issue_end.SERIAL_NO_START-1 end
      and ('${3. Item Type#choice(1,2,3,4,6)#MASTER:IT}' is null or type.ITEM_TYPE_NO = '${3. Item Type#choice(1,2,3,4,6)#MASTER:IT}')
      and ('${4. Entity#choice(1,2,3)#MASTER:EM}' is null or entity.entity_no = '${4. Entity#choice(1,2,3)#MASTER:EM}')
    ) generated
order by case when '${2. Sort By#choice(IT,VN)#NC:STII_ORDER}' = 'IT' then TYPE_NAME else null end, generated.available_start</ds:sql>
  </ds:jdbc>
</ds:datasource>

