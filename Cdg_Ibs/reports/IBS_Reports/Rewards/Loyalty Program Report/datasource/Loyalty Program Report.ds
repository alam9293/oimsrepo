<?xml version="1.0" encoding="UTF-8"?>
<ds:datasource xmlns:ds="http://www.elixirtech.com/DataSource" name="Loyalty Program Report" type="JDBC" description="">
  <ds:schema case-sensitive="Yes">
    <ds:column name="CUST_NO" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCOUNT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="PRODUCT_TYPES" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="VALUE_PER_POINT" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="BALANCE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="BALANCE_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADJUSTED" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADJUSTED_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="AWARD" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="AWARD_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="REDEEM" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="REDEEM_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EXPIRED" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EXPIRED_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CLOSING" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CLOSING_VALUE" type="Double">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CUT_OFF_DT" type="Timestamp">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="EXPIRE_DT" type="Timestamp">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CREATED_DT" type="Timestamp">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EFFECTIVE_DT" type="Timestamp">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ACCT_STATUS" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
    <ds:column name="CONTACT_NAME" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="CONTACTS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="FAXS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="EMAILS" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_BLOCK" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_STREET" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_UNIT" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_BUILDING" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_AREA" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="ADDRESS_POSTAL" type="String">
      <ds:attribute name="Nullable" nullable="yes" />
    </ds:column>
    <ds:column name="NAME" type="String">
      <ds:attribute name="Nullable" nullable="no" />
    </ds:column>
  </ds:schema>
  <ds:security />
  <ds:jdbc connection-type="POOL" connection-pool="/IBS_Reports/ConnectionPool/IBS Connection Pool.pool" connection-pool-timeout="0" callable-statement="No" connection-reuse="0" nulls-to-strings="No" read-only="Yes" auto-commit="Yes">
    <ds:sql>select acct.CUST_NO, acct.ACCOUNT_NAME, subscriptions.product_types,
    value_per_point.master_value as value_per_point,
    nvl(reward_balance.balance, 0) as balance, nvl(reward_balance.balance, 0) * value_per_point.master_value as balance_value,
    nvl(current_adjustment.adjusted, 0) as adjusted, nvl(current_adjustment.adjusted, 0) * value_per_point.master_value as adjusted_value,
    nvl(current_award.award, 0) as award, nvl(current_award.award, 0) * value_per_point.master_value as award_value,
    nvl(current_redeem.redeem, 0) as redeem, nvl(current_redeem.redeem, 0) * value_per_point.master_value as redeem_value,
    case when current_status.ACCT_STATUS = 'C' or reward_acct.EXPIRE_DT &lt; case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end then (nvl(reward_balance.balance, 0) + nvl(current_award.award, 0) - nvl(current_redeem.redeem, 0) + nvl(current_adjustment.adjusted, 0)) else 0 end as expired,
    case when current_status.ACCT_STATUS = 'C' or reward_acct.EXPIRE_DT &lt; case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end then (nvl(reward_balance.balance, 0) + nvl(current_award.award, 0) - nvl(current_redeem.redeem, 0) + nvl(current_adjustment.adjusted, 0)) else 0 end * value_per_point.master_value as expired_value,
    case when current_status.ACCT_STATUS = 'C' or reward_acct.EXPIRE_DT &lt; case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end then 0 else (nvl(reward_balance.balance, 0) + nvl(current_award.award, 0) - nvl(current_redeem.redeem, 0) + nvl(current_adjustment.adjusted, 0)) end as closing,
    case when current_status.ACCT_STATUS = 'C' or reward_acct.EXPIRE_DT &lt; case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end then 0 else (nvl(reward_balance.balance, 0) + nvl(current_award.award, 0) - nvl(current_redeem.redeem, 0) + nvl(current_adjustment.adjusted, 0)) end * value_per_point.master_value as closing_value,
    reward_acct.CUT_OFF_DT as CUT_OFF_DT, reward_acct.EXPIRE_DT as EXPIRE_DT, acct.CREATED_DT, t_status.EFFECTIVE_DT, current_status.ACCT_STATUS,
    case when main_sal.MASTER_NO is not null then main_sal.MASTER_VALUE||' ' else '' end || contact.MAIN_CONTACT_NAME || case when contact.MAIN_CONTACT_NAME is not null and contact.SUB_CONTACT_NAME is not null then ' / ' else '' end || case when contact.SUB_CONTACT_NAME is not null then case when sub_sal.MASTER_NO is not null then sub_sal.MASTER_VALUE||' ' else '' end || contact.SUB_CONTACT_NAME else '' end as contact_name,
    contact.MAIN_CONTACT_TEL || case when contact.MAIN_CONTACT_MOBILE is not null then ', '||contact.MAIN_CONTACT_MOBILE else '' end || case when contact.SUB_CONTACT_TEL is not null or contact.SUB_CONTACT_MOBILE is not null then ' / '||nvl(contact.SUB_CONTACT_TEL, '')||case when contact.SUB_CONTACT_TEL is not null and contact.SUB_CONTACT_MOBILE is not null then ', ' else '' end||nvl(contact.SUB_CONTACT_MOBILE, '') else '' end as contacts,
    contact.MAIN_CONTACT_FAX || case when contact.SUB_CONTACT_FAX is not null then ' / ' else '' end || nvl(contact.SUB_CONTACT_FAX, '') as faxs,
    contact.MAIN_CONTACT_EMAIL || case when contact.SUB_CONTACT_EMAIL is not null then ' / ' else '' end || nvl(contact.SUB_CONTACT_EMAIL, '') as emails,
    contact.ADDRESS_BLOCK, contact.ADDRESS_STREET, contact.ADDRESS_UNIT, contact.ADDRESS_BUILDING, contact.ADDRESS_AREA, contact.ADDRESS_POSTAL,
    sales.NAME from LRTB_REWARD_ACCOUNT reward_acct
    inner join AMTB_ACCOUNT acct on reward_acct.ACCOUNT_NO = acct.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = acct.ar_control_code_no
	inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    left join AMTB_ACCT_STATUS t_status on acct.ACCOUNT_NO = t_status.ACCOUNT_NO and t_status.ACCT_STATUS = 'T'
    inner join (
select ACCOUNT_NO, max(EFFECTIVE_DT) as last_effective_dt from AMTB_ACCT_STATUS where effective_dt &lt; current_timestamp group by account_no
    ) acct_last_status on acct.ACCOUNT_NO = acct_last_status.ACCOUNT_NO
    inner join AMTB_ACCT_STATUS current_status on acct.ACCOUNT_NO = current_status.ACCOUNT_NO and current_status.EFFECTIVE_DT = acct_last_status.last_effective_dt and ('${3. Account Status#choice()#NC:ACCOUNT_STATUS}' is null or current_status.ACCT_STATUS = '${3. Account Status#choice()#NC:ACCOUNT_STATUS}')
    left join (
select ACCOUNT_NO, listagg(PRODUCT_TYPE_ID, ',') within group(order by product_type_id) as product_types from AMTB_SUBSC_TO where REWARD_PLAN_NO is not null group by ACCOUNT_NO
    ) subscriptions on acct.ACCOUNT_NO = subscriptions.ACCOUNT_NO
    left join AMTB_ACCT_MAIN_CONTACT main_contact on acct.ACCOUNT_NO = main_contact.ACCOUNT_NO and main_contact.MAIN_CONTACT_TYPE = 'S'
    left join AMTB_CONTACT_PERSON contact on main_contact.CONTACT_PERSON_NO = contact.CONTACT_PERSON_NO
    left join MSTB_MASTER_TABLE main_sal on contact.MAIN_CONTACT_SAL = main_sal.MASTER_NO
    left join MSTB_MASTER_TABLE sub_sal on contact.SUB_CONTACT_SAL = sub_sal.MASTER_NO
    inner join MSTB_MASTER_TABLE value_per_point on value_per_point.MASTER_TYPE = 'RPPR'
    inner join (
select ACCOUNT_NO, max(effective_dt_from) as last_effective_dt_from from AMTB_ACCT_SALESPERSON where EFFECTIVE_DT_FROM &lt; current_timestamp group by ACCOUNT_NO
    ) last_sales on acct.ACCOUNT_NO = last_sales.ACCOUNT_NO
    inner join AMTB_ACCT_SALESPERSON acct_sales on acct.ACCOUNT_NO = acct_sales.ACCOUNT_NO and acct_sales.EFFECTIVE_DT_FROM = last_sales.last_effective_dt_from
    inner join MSTB_SALESPERSON sales on sales.SALESPERSON_NO = acct_sales.SALESPERSON_NO
    left join (
select txn.REWARD_ACCOUNT_NO, sum(rewards_pts) as balance from lrtb_reward_txn txn inner join LRTB_REWARD_ACCOUNT reward_acct on txn.REWARD_ACCOUNT_NO = reward_acct.REWARD_ACCOUNT_NO and reward_acct.EXPIRE_DT &gt; to_timestamp(substr('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 0, 8)||'01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') left join BMTB_INVOICE_HEADER header on txn.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO where 
	(
   		(txn.GIFT_STOCK_NO is null and txn.CONTACT_PERSON_NO is null and txn.ADJ_REQ_NO is null and txn.REWARDS_PTS &gt;= 0)
    	OR
   		(txn.gift_stock_no is not null or txn.contact_person_no is not null or txn.adj_req_no is not null) 
    )
    and
	case when txn.created_dt is null then header.CREATED_DT else txn.created_dt end &lt; to_timestamp(substr('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 0, 8)||'01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') group by txn.REWARD_ACCOUNT_NO
    ) reward_balance on reward_acct.REWARD_ACCOUNT_NO = reward_balance.REWARD_ACCOUNT_NO
    left join (
select REWARD_ACCOUNT_NO, sum(rewards_pts) as award from lrtb_reward_txn txn left join BMTB_INVOICE_HEADER header on txn.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO where adj_req_no is null and rewards_pts &gt; 0 and case when txn.created_dt is null then header.CREATED_DT else txn.created_dt end between to_timestamp(substr('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 0, 8)||'01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end group by REWARD_ACCOUNT_NO
    ) current_award on reward_acct.REWARD_ACCOUNT_NO = current_award.REWARD_ACCOUNT_NO
    left join (
select REWARD_ACCOUNT_NO, sum(-rewards_pts) as redeem from lrtb_reward_txn txn inner join LRTB_GIFT_STOCK gift on txn.GIFT_STOCK_NO = gift.GIFT_STOCK_NO left join BMTB_INVOICE_HEADER header on txn.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO where adj_req_no is null and rewards_pts &lt; 0 and case when txn.created_dt is null then header.CREATED_DT else txn.created_dt end between to_timestamp(substr('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 0, 8)||'01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end group by REWARD_ACCOUNT_NO
    ) current_redeem on reward_acct.REWARD_ACCOUNT_NO = current_redeem.REWARD_ACCOUNT_NO
    left join (
    select REWARD_ACCOUNT_NO, sum(rewards_pts) as adjusted from lrtb_reward_txn txn where adj_req_no is not null and txn.created_dt between to_timestamp(substr('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 0, 8)||'01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') and case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end group by REWARD_ACCOUNT_NO
    ) current_adjustment on reward_acct.REWARD_ACCOUNT_NO = current_adjustment.REWARD_ACCOUNT_NO
    where (reward_balance.balance is not null or current_award.award is not null or current_redeem.redeem is not null or current_adjustment.adjusted is not null)
    and ('${1. Account Type#choice()#MASTER:AT:REQUIRED}' is null or acct.ACCT_TYPE_NO = '${1. Account Type#choice()#MASTER:AT:REQUIRED}')
    and acct.CUST_NO like '%${2a. Account No#acctsearch#custId}%'
    and acct.ACCOUNT_NAME like '%${2b. Account Name#acctsearch#custName}%'
    and ('${4. Subscribed Product Type#choice()#MASTER:PT}' is null or subscriptions.PRODUCT_TYPES like '%${4. Subscribed Product Type#choice()#MASTER:PT}%')
    and ('${7. Sales Person#choice()#MASTER:SP}' is null or sales.SALESPERSON_NO = '${7. Sales Person#choice()#MASTER:SP}')
    and ('${9. Entity#choice(1,2,3)#MASTER:EM}' is null or entity.entity_no = '${9. Entity#choice(1,2,3)#MASTER:EM}')
    order by case when '${8. Sort By#choice(AN,CB)#NC:LPR_ORDER:REQUIRED}' = 'AN' then acct.ACCOUNT_NAME else null end, case when '${8. Sort By#choice(AN,CB)#NC:LPR_ORDER:REQUIRED}' = 'CB' then case when current_status.ACCT_STATUS = 'C' or reward_acct.EXPIRE_DT &lt; case when '${6. Points Date End Month#date()#MMMYY}' is null then to_timestamp(to_char(last_day(to_date('${5. Points Date Start Month#date()#MMMYY:REQUIRED}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') else to_timestamp(to_char(last_day(to_date('${6. Points Date End Month#date()#MMMYY}', 'yyyy-mm-dd')),'yyyy-mm-dd')||' 23:59:59', 'yyyy-mm-dd hh24:mi:ss') end then 0 else (nvl(reward_balance.balance, 0) + nvl(current_award.award, 0) - nvl(current_redeem.redeem, 0) + nvl(current_adjustment.adjusted, 0)) end else null end</ds:sql>
  </ds:jdbc>
</ds:datasource>

