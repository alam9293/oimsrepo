<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="cashlessAgingReportDetailed">
	<return-scalar column="name" 				type="string"/>
	<return-scalar column="batch_date" 			type="string"/>
	<return-scalar column="batch_no"			type="string"/>
	<return-scalar column="total_amt"			type="string"/>
	<return-scalar column="paid_amt"			type="string"/>
	<return-scalar column="reject_amt"			type="string"/>
	<return-scalar column="unpaid_amt"			type="string"/>
	<return-scalar column="first_aging"			type="string"/>
	<return-scalar column="second_aging"		type="string"/>
	<return-scalar column="third_aging"			type="string"/>
	<return-scalar column="fourth_aging"		type="string"/>
	<return-scalar column="fifth_aging"			type="string"/>
	<![CDATA[
select acquirer.NAME,
	to_char(batch.SETTLEMENT_DATE, 'dd/mm/yyyy') as batch_date,
	batch.BATCH_NO,
	trim(to_char(sum(txn.total), '999,999,990.00')) as total_amt,
    trim(to_char(sum(case when txn.STATUS in ('B', 'C') then txn.total else 0 end), '999,999,990.00')) as paid_amt,
    trim(to_char(sum(case when txn.STATUS = 'R' then txn.total else 0 end), '999,999,990.00')) as reject_amt,
    trim(to_char(sum(case when txn.STATUS = 'O' then txn.total else 0 end), '999,999,990.00')) as unpaid_amt,
    trim(to_char(sum(case when txn.STATUS = 'O' then case when batch.settlement_date > to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 7 then txn.TOTAL else 0 end else 0 end), '999,999,990.00')) as first_aging,
    trim(to_char(sum(case when txn.STATUS = 'O' then case when batch.settlement_date between to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 14 and to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 7 then txn.TOTAL else 0 end else 0 end), '999,999,990.00')) as second_aging,
    trim(to_char(sum(case when txn.STATUS = 'O' then case when batch.settlement_date between to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 21 and to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 14 then txn.TOTAL else 0 end else 0 end), '999,999,990.00')) as third_aging,
    trim(to_char(sum(case when txn.STATUS = 'O' then case when batch.settlement_date between to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 28 and to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 21 then txn.TOTAL else 0 end else 0 end), '999,999,990.00')) as fourth_aging,
    trim(to_char(sum(case when txn.STATUS = 'O' then case when batch.settlement_date < to_timestamp(:agingDate, 'yyyy-mm-dd hh24:mi:ss') - 28 then txn.TOTAL else 0 end else 0 end), '999,999,990.00')) as fifth_aging
    from TMTB_NON_BILLABLE_TXN txn
    inner join TMTB_NON_BILLABLE_BATCH batch on txn.BATCH_ID = batch.BATCH_ID
    inner join MSTB_ACQUIRER acquirer on batch.ACQUIRER_NO = acquirer.ACQUIRER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    where ((:batchStart is null and :batchEnd is null)or(batch.SETTLEMENT_DATE between case when :batchStart is null then to_date(:batchEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:batchStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :batchEnd is null then to_date(:batchStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:batchEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entityNo is null or entity.ENTITY_NO = :entityNo)
    and (:providerNo is null or provider.MASTER_CODE = :providerNo)
    and (:acquirerNo is null or acquirer.ACQUIRER_NO = :acquirerNo)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')

    group by acquirer.NAME, batch.BATCH_NO, batch.SETTLEMENT_DATE
    order by acquirer.NAME, case when :sort = 'SD' then batch.SETTLEMENT_DATE else null end, case when :sort = 'BN' then batch.BATCH_NO else null end
    ]]>
</sql-query>
</hibernate-mapping>