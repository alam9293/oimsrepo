<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="cashlessCollectionStatisticsSummary">
	<return-scalar column="entity_code" 	type="string"/>
	<return-scalar column="net_received"	type="string"/>
	<return-scalar column="chargeback_amt"	type="string"/>
	<return-scalar column="rejected_amt"	type="string"/>
	<return-scalar column="mdr_value"		type="string"/>
	<![CDATA[
	select entity.ENTITY_CODE,
	trim(to_char(sum(collection_amount), '999,999,990.00')) as net_received,
	trim(to_char(sum(chargeback_amount), '999,999,990.00')) as chargeback_amt,
	trim(to_char(sum(rejected_amount), '999,999,990.00')) as rejected_amt,
	trim(to_char(sum(mdr_value + mdr_adjustment), '999,999,990.00')) as mdr_value
    from BMTB_BANK_PAYMENT payment
    inner join (select detail.PAYMENT_NO, avg(ACQUIRER_NO) as ACQUIRER_NO from BMTB_BANK_PAYMENT_DETAIL detail
        inner join TMTB_NON_BILLABLE_BATCH batch on detail.BATCH_ID = batch.BATCH_ID
        group by detail.PAYMENT_NO) acquirer on payment.PAYMENT_NO = acquirer.PAYMENT_NO
    inner join MSTB_ACQUIRER acq on acq.ACQUIRER_NO = acquirer.ACQUIRER_NO
    inner join FMTB_BANK_CODE bank on bank.BANK_CODE_NO = payment.BANK_IN
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = bank.ENTITY_NO
    where ((:creditStart is null and :creditEnd is null)or(payment.CREDIT_DATE between case when :creditStart is null then to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :creditEnd is null then to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entityNo is null or entity.ENTITY_NO = :entityNo)
    and (:acquirerNo is null or acq.ACQUIRER_NO = :acquirerNo)
    group by entity.ENTITY_CODE
	]]>
</sql-query>
<sql-query name="cashlessCollectionStatisticsDetailed">
	<return-scalar column="name" 			type="string"/>
	<return-scalar column="credit_date"		type="string"/>
	<return-scalar column="net_received"	type="string"/>
	<return-scalar column="chargeback_amt"	type="string"/>
	<return-scalar column="rejected_amt"	type="string"/>
	<return-scalar column="mdr_value"		type="string"/>
	<return-scalar column="mdr"				type="string"/>
	<![CDATA[
	select acq.NAME,
	to_char(payment.CREDIT_DATE, 'dd/mm/yyyy') as CREDIT_DATE,
	trim(to_char(sum(collection_amount), '999,999,990.00')) as net_received,
	trim(to_char(sum(chargeback_amount), '999,999,990.00')) as chargeback_amt,
	trim(to_char(sum(rejected_amount), '999,999,990.00')) as rejected_amt,
	trim(to_char(sum(mdr_value + mdr_adjustment), '999,999,990.00')) as mdr_value,
	trim(to_char(avg(mdr_percentage), '999999990.00')) as mdr
    from BMTB_BANK_PAYMENT payment
    inner join (select detail.PAYMENT_NO, avg(ACQUIRER_NO) as ACQUIRER_NO from BMTB_BANK_PAYMENT_DETAIL detail
        inner join TMTB_NON_BILLABLE_BATCH batch on detail.BATCH_ID = batch.BATCH_ID
        group by detail.PAYMENT_NO) acquirer on payment.PAYMENT_NO = acquirer.PAYMENT_NO
    inner join MSTB_ACQUIRER acq on acq.ACQUIRER_NO = acquirer.ACQUIRER_NO
    inner join FMTB_BANK_CODE bank on bank.BANK_CODE_NO = payment.BANK_IN
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = bank.ENTITY_NO
    where ((:creditStart is null and :creditEnd is null)or(payment.CREDIT_DATE between case when :creditStart is null then to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :creditEnd is null then to_date(:creditStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:creditEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entityNo is null or entity.ENTITY_NO = :entityNo)
    and (:acquirerNo is null or acq.ACQUIRER_NO = :acquirerNo)
    group by acq.NAME, payment.CREDIT_DATE
    order by payment.CREDIT_DATE
	]]>
</sql-query>
</hibernate-mapping>