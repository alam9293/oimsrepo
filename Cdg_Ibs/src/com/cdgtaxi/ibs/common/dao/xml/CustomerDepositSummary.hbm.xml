<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="customerDepositSummary">
	<return-scalar column="cust_no" 		type="string"/>
	<return-scalar column="account_name" 	type="string"/>
	<return-scalar column="deposit_amt"		type="string"/>
	<return-scalar column="received_amt"	type="string"/>
	<return-scalar column="refund_amt"		type="string"/>
	<return-scalar column="offset_amt"		type="string"/>
	<return-scalar column="balance"			type="string"/>
	<![CDATA[
  select deposit.CUST_NO,
    deposit.ACCOUNT_NAME,
    trim(to_char(deposit.DEPOSIT_AMT, '999,999,990.00')) as DEPOSIT_AMT,
    trim(to_char(case when deposit.RECEIVED_AMT is null then 0 else deposit.RECEIVED_AMT end, '999,999,990.00')) as RECEIVED_AMT,
    trim(to_char(case when refund.REFUND_AMT is null then 0 else refund.REFUND_AMT end, '999,999,990.00')) as REFUND_AMT,
    trim(to_char(case when offset.OFFSET_AMT is null then 0 else offset.OFFSET_AMT end, '999,999,990.00')) as OFFSET_AMT,
    trim(to_char(case when deposit.RECEIVED_AMT is null then 0 else deposit.RECEIVED_AMT end - case when refund.REFUND_AMT is null then 0 else refund.REFUND_AMT end - case when offset.OFFSET_AMT is null then 0 else offset.OFFSET_AMT end, '999,999,990.00')) as BALANCE from(select acct.ACCOUNT_NO, acct.CUST_NO, acct.ACCOUNT_NAME, sum(deposit.amount) as deposit_amt, sum(deposit.amount)-sum(header.OUTSTANDING_AMOUNT) as received_amt from BMTB_INVOICE_DEPOSIT_TXN deposit
    left join BMTB_INVOICE_HEADER header on deposit.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
    inner join AMTB_ACCOUNT acct on deposit.ACCOUNT_NO = acct.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on acct.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO inner join FMTB_ENTITY_MASTER entity on ar.ENTITY_NO = entity.ENTITY_NO
    where deposit.TXN_TYPE = 'R' and acct.CUST_NO like :acctNo and acct.ACCOUNT_NAME like :acctName and
    (:entity is null or entity.ENTITY_NO = :entity)
    group by acct.ACCOUNT_NO, acct.ACCOUNT_NAME, acct.CUST_NO order by account_name) deposit
    left join (select deposit.ACCOUNT_NO, sum(deposit.amount) as refund_amt from BMTB_INVOICE_DEPOSIT_TXN deposit where deposit.TXN_TYPE = 'F' and deposit.PAYMENT_RECEIPT_NO is not null group by deposit.ACCOUNT_NO) refund on refund.ACCOUNT_NO = deposit.ACCOUNT_NO
    left join (select deposit.ACCOUNT_NO, sum(deposit.amount) as offset_amt from BMTB_INVOICE_DEPOSIT_TXN deposit where deposit.TXN_TYPE = 'F' and deposit.PAYMENT_RECEIPT_NO is null group by deposit.ACCOUNT_NO) offset on offset.ACCOUNT_NO = deposit.ACCOUNT_NO
	]]>
</sql-query>
</hibernate-mapping>