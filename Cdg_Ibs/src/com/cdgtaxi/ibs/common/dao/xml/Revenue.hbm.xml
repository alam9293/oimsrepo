<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="revenueSummary">
	<return-scalar column="INVOICE_HEADER_NO"	type="string"/>
	<return-scalar column="cust_no" 			type="string"/>
	<return-scalar column="account_name" 		type="string"/>
	<return-scalar column="invoice_date"		type="string"/>
	<return-scalar column="invoice_no"			type="string"/>
	<return-scalar column="new_txn"				type="string"/>
	<return-scalar column="volume_discount"		type="string"/>
	<return-scalar column="early_payment"		type="string"/>
	<return-scalar column="promo_dis"			type="string"/>
	<return-scalar column="issuance"			type="string"/>
	<return-scalar column="replacement"			type="string"/>
	<return-scalar column="subscription"		type="string"/>
	<return-scalar column="late_interest"		type="string"/>
	<return-scalar column="deposit"				type="string"/>
	<return-scalar column="misc"				type="string"/>
	<return-scalar column="credit_amt"			type="string"/>
	<return-scalar column="debit_amt"			type="string"/>
	<return-scalar column="prepaid_discount"	type="string"/>
	<return-scalar column="gst"					type="string"/>
	
	<![CDATA[
	  select 
		case
			when acct.CUST_NO is not null then acct.CUST_NO
	        when parent.CUST_NO is not null then parent.CUST_NO
	        when grand.CUST_NO is not null then grand.CUST_NO
		end as CUST_NO,
		case
			when acct.CUST_NO is not null then acct.ACCOUNT_NAME
	        when parent.CUST_NO is not null then parent.ACCOUNT_NAME
	        when grand.CUST_NO is not null then grand.ACCOUNT_NAME
		end as ACCOUNT_NAME,
		header.INVOICE_HEADER_NO, header.INVOICE_NO, to_char(header.INVOICE_DATE, 'dd/mm/yyyy') as INVOICE_DATE, 
		trim(to_char(header.NEW_TXN, '999,999,990.00')) as new_txn,
		trim(to_char(vd_summary.NEW_TXN + vd_summary.ADMIN_FEE, '999,999,990.00')) as volume_discount, 
		trim(to_char(ep_summary.NEW_TXN + ep_summary.ADMIN_FEE, '999,999,990.00')) as early_payment, 
		trim(to_char(if_summary.TOTAL_NEW, '999,999,990.00')) as issuance, 
		trim(to_char(rf_summary.TOTAL_NEW, '999,999,990.00')) as replacement, 
		trim(to_char(sf_summary.TOTAL_NEW, '999,999,990.00')) as subscription, 
		trim(to_char(gst_summary.TOTAL_GST, '999,999,990.00')) as gst, 
		trim(to_char(debit_note.DEBIT_AMT, '999,999,990.00')) as DEBIT_AMT, 
		trim(to_char(-credit_note.CREDIT_AMT, '999,999,990.00')) as CREDIT_AMT, 
		trim(to_char(pd_summary.TOTAL_NEW, '999,999,990.00')) as promo_dis, 
		trim(to_char(dp_summary.TOTAL_NEW, '999,999,990.00')) as deposit, 
		trim(to_char(ms_summary.TOTAL_NEW, '999,999,990.00')) as misc, 
		trim(to_char(lp_summary.TOTAL_NEW, '999,999,990.00')) as LATE_INTEREST,
		trim(to_char(pdc_summary.TOTAL_NEW, '999,999,990.00')) as PREPAID_DISCOUNT
		from BMTB_INVOICE_HEADER header
		--EP, LP, VD
		left join BMTB_INVOICE_SUMMARY vd_summary on vd_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO and vd_summary.SUMMARY_TYPE = 'VD'
	    left join BMTB_INVOICE_SUMMARY ep_summary on ep_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO and ep_summary.SUMMARY_TYPE = 'EP' and ep_summary.ADMIN_FEE <> 0
	    left join (
	    		select invoice_header_no, sum(TOTAL_NEW) as TOTAL_NEW
	    		from BMTB_INVOICE_SUMMARY
	    		where SUMMARY_TYPE = 'LP'
	    		group by invoice_header_no
	    ) lp_summary on lp_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
		--GST
	    left join (select INVOICE_HEADER_NO, sum(GST) as total_gst from BMTB_INVOICE_SUMMARY group by INVOICE_HEADER_NO) gst_summary on gst_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
		--IF, RF, SF, PD, DP, MS, P_DC
		left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'IF' group by INVOICE_HEADER_NO) if_summary on if_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
		left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'RF' group by INVOICE_HEADER_NO) rf_summary on rf_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
	    left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'SF' group by INVOICE_HEADER_NO) sf_summary on sf_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
	    left join (select header.INVOICE_HEADER_NO, sum(-detail.DEDUCTED_PROMO_DIS) as total_new from BMTB_INVOICE_DETAIL detail inner join BMTB_INVOICE_SUMMARY summary on summary.INVOICE_SUMMARY_NO = detail.INVOICE_SUMMARY_NO inner join BMTB_INVOICE_HEADER header on header.INVOICE_HEADER_NO = summary.INVOICE_HEADER_NO where detail.DEDUCTED_PROMO_DIS > 0 group by header.INVOICE_HEADER_NO) pd_summary on pd_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
	    left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'DP' group by INVOICE_HEADER_NO) dp_summary on dp_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
	    left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'MS' group by INVOICE_HEADER_NO) ms_summary on ms_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
		left join (select INVOICE_HEADER_NO, sum(TOTAL_NEW)-sum(GST) as total_new from BMTB_INVOICE_SUMMARY where SUMMARY_TYPE = 'P_DC' group by INVOICE_HEADER_NO) pdc_summary on pdc_summary.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
		
		
	    --CREDIT NOTE
		left join (
			select header.INVOICE_HEADER_NO, sum(credit_note.NOTE_AMOUNT + credit_note.ADMIN_FEE - credit_note.DISCOUNT - credit_note.PROD_DIS) as credit_amt
			from BMTB_INVOICE_HEADER header
			inner join BMTB_INVOICE_SUMMARY summary on header.INVOICE_HEADER_NO = summary.INVOICE_HEADER_NO
			inner join BMTB_INVOICE_DETAIL detail on summary.INVOICE_SUMMARY_NO = detail.INVOICE_SUMMARY_NO
			inner join BMTB_INVOICE_TXN txn on detail.INVOICE_DETAIL_NO = txn.INVOICE_DETAIL_NO
			inner join BMTB_NOTE credit_note on txn.INVOICE_TXN_NO = credit_note.BILLED_INVOICE_TXN_NO and credit_note.NOTE_TYPE = 'C'
			where header.invoice_status != 'D'
			group by header.INVOICE_HEADER_NO
		) credit_note on header.INVOICE_HEADER_NO = credit_note.INVOICE_HEADER_NO
		--DEBIT NOTE
		left join (
			select header.INVOICE_HEADER_NO, sum(debit_note.NOTE_AMOUNT + debit_note.ADMIN_FEE - debit_note.DISCOUNT - debit_note.PROD_DIS) as debit_amt 
			from BMTB_INVOICE_HEADER header
			inner join BMTB_INVOICE_SUMMARY summary on header.INVOICE_HEADER_NO = summary.INVOICE_HEADER_NO
			inner join BMTB_INVOICE_DETAIL detail on summary.INVOICE_SUMMARY_NO = detail.INVOICE_SUMMARY_NO
			inner join BMTB_INVOICE_TXN txn on detail.INVOICE_DETAIL_NO = txn.INVOICE_DETAIL_NO
			inner join BMTB_NOTE debit_note on txn.INVOICE_TXN_NO = debit_note.BILLED_INVOICE_TXN_NO and debit_note.NOTE_TYPE = 'D'
			where header.invoice_status != 'D'
			group by header.INVOICE_HEADER_NO
		) debit_note on header.INVOICE_HEADER_NO = debit_note.INVOICE_HEADER_NO
	    --MULTI LEVEL ACCT
		inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
	    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
	    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
	    --AR & ENTITY
		inner join FMTB_AR_CONT_CODE_MASTER ar_master on case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end = ar_master.AR_CONTROL_CODE_NO
	    inner join FMTB_ENTITY_MASTER entity on ar_master.ENTITY_NO = entity.ENTITY_NO and (:entityNo is null or :entityNo = entity.ENTITY_NO)
	    where ((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then last_day(to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss')) else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
	    and header.invoice_status != 'D'
	    order by header.INVOICE_NO
	]]>
</sql-query>
<sql-query name="revenueMisc">
	<return-scalar column="cust_no" 			type="string"/>
	<return-scalar column="account_name" 		type="string"/>
	<return-scalar column="invoice_date"		type="string"/>
	<return-scalar column="invoice_no"			type="string"/>
	<return-scalar column="TXN_CODE"			type="string"/>
	<return-scalar column="amount"				type="string"/>
	<return-scalar column="discount"			type="string"/>
	<![CDATA[
  	select
		top.CUST_NO, top.ACCOUNT_NAME, to_char(header.INVOICE_DATE, 'dd/mm/yyyy') as INVOICE_DATE, header.INVOICE_NO, 
		detail.TXN_CODE, NVL(sum(detail.NEW_TXN),0) as amount, NVL(sum(detail.TOTAL_NEW - detail.NEW_TXN - detail.GST),0) as discount
	from BMTB_INVOICE_HEADER header
	left join BMTB_INVOICE_SUMMARY summary on header.invoice_header_no = summary.invoice_header_no
	left join BMTB_INVOICE_DETAIL detail on detail.invoice_summary_no = summary.invoice_summary_no AND detail.TXN_CODE in (select transaction_code_no from FMTB_TRANSACTION_CODE where TXN_TYPE = 'MS')
	inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
	left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
	left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
	inner join AMTB_ACCOUNT top on top.ACCOUNT_NO = (
		case when acct.CUST_NO is not null then acct.account_no
		when parent.CUST_NO is not null then parent.account_no
		when grand.CUST_NO is not null then grand.account_no
		end
	)
	inner join FMTB_AR_CONT_CODE_MASTER ar_master on case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end = ar_master.AR_CONTROL_CODE_NO
	inner join FMTB_ENTITY_MASTER entity on ar_master.ENTITY_NO = entity.ENTITY_NO and (:entityNo is null or :entityNo = entity.ENTITY_NO)
	where
		header.INVOICE_NO is not NULL
		AND
		((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then last_day(to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss')) else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
	 and header.invoice_status != 'D'
	group by top.CUST_NO, top.ACCOUNT_NAME, header.INVOICE_DATE, header.INVOICE_NO, detail.TXN_CODE
	order by header.INVOICE_NO
	]]>
</sql-query>
<sql-query name="revenueHeader">
	<return-scalar column="vol_dis" 			type="string"/>
	<return-scalar column="ely_pmt_dis" 		type="string"/>
	<return-scalar column="promo_dis"			type="string"/>
	<return-scalar column="issuance_fee"		type="string"/>
	<return-scalar column="rplc_amt"			type="string"/>
	<return-scalar column="subscription_fee"	type="string"/>
	<return-scalar column="late_pmt_int"		type="string"/>
	<return-scalar column="deposit"				type="string"/>
	<![CDATA[
	select code1.description as VOL_DIS,
	    code2.description as ELY_PMT_DIS,
	    code3.description as PROMO_DIS,
	    code8.description as ISSUANCE_FEE,
	    code4.description as RPLC_AMT,
	    code5.description as SUBSCRIPTION_FEE,
	    code6.description as LATE_PMT_INT,
	    code7.description as DEPOSIT
    from FMTB_TRANSACTION_CODE code1
    left join FMTB_TRANSACTION_CODE code2 on code2.TXN_CODE = 'DEPAYT'
    left join FMTB_TRANSACTION_CODE code3 on code3.TXN_CODE = 'PRODIS'
    left join FMTB_TRANSACTION_CODE code4 on code4.TXN_CODE = 'CRPLFEE'
    left join FMTB_TRANSACTION_CODE code5 on code5.TXN_CODE = 'SUBFEE'
    left join FMTB_TRANSACTION_CODE code6 on code6.TXN_CODE = 'ILATEP'
    left join FMTB_TRANSACTION_CODE code7 on code7.TXN_CODE = 'DEPOSIT'
    left join FMTB_TRANSACTION_CODE code8 on code8.TXN_CODE = 'ISSUFEE'
    where code1.TXN_CODE = 'VOLDIS'
	]]>
</sql-query>
<sql-query name="revenueHeaderForMisc">
	<return-scalar column="TRANSACTION_CODE_NO" type="string"/>
	<return-scalar column="DESCRIPTION" 		type="string"/>
	<![CDATA[
	select
		TRANSACTION_CODE_NO, DESCRIPTION
	from FMTB_TRANSACTION_CODE
	where TXN_TYPE = 'MS'
	]]>
</sql-query>
<sql-query name="revenueHeaderForProductTypeId">
	<return-scalar column="PRODUCT_TYPE_ID" type="string"/>
	<![CDATA[
	  	select distinct PRODUCT_TYPE_ID
		from BMTB_INVOICE_SUMMARY BIS
		where exists(
			select header.INVOICE_HEADER_NO
			from BMTB_INVOICE_HEADER header
			inner join AMTB_ACCOUNT acct on header.ACCOUNT_NO = acct.ACCOUNT_NO
			left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
			left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
			inner join FMTB_AR_CONT_CODE_MASTER ar_master on case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end = ar_master.AR_CONTROL_CODE_NO
			inner join FMTB_ENTITY_MASTER entity on ar_master.ENTITY_NO = entity.ENTITY_NO and (:entityNo is null or :entityNo = entity.ENTITY_NO)
			where 
				BIS.INVOICE_HEADER_NO = header.INVOICE_HEADER_NO
				AND
				((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then last_day(to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss')) else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
				 and header.invoice_status != 'D'
		)
		AND BIS.PRODUCT_TYPE_ID is not null
		ORDER BY BIS.PRODUCT_TYPE_ID
	]]>
</sql-query>
<sql-query name="revenueProductTypeTripInfos">
	<return-scalar column="PRODUCT_TYPE_ID" type="string"/>
	<return-scalar column="FARE" type="string"/>
	<return-scalar column="ADMIN_FEE" type="string"/>
	<return-scalar column="PRODUCT_DISCOUNT" type="string"/>
	<![CDATA[
	  	select 
			summary.INVOICE_HEADER_NO, 
			summary.PRODUCT_TYPE_ID,
			trim(to_char(NVL(sum(details.FARE), 0), '999,999,990.00')) as FARE, 
			trim(to_char(NVL(sum(details.ADMIN_FEE), 0), '999,999,990.00')) as ADMIN_FEE, 
			trim(to_char(NVL(-sum(details.PRODUCT_DISCOUNT), 0), '999,999,990.00')) as PRODUCT_DISCOUNT
		from BMTB_INVOICE_SUMMARY summary
		inner join bmtb_invoice_header header on summary.invoice_header_no = header.invoice_header_no
		left join (
			select INVOICE_SUMMARY_NO, 
			sum(NEW_TXN + DEDUCTED_PROMO_DIS) as fare, sum(ORI_ADMIN_FEE) as admin_fee, sum(PROD_DIS) as product_discount 
			from BMTB_INVOICE_DETAIL 
			group by INVOICE_SUMMARY_NO
		) details on details.INVOICE_SUMMARY_NO = summary.INVOICE_SUMMARY_NO
		where
			summary.INVOICE_HEADER_NO = :invoiceHeaderNo 
			AND ((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then last_day(to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss')) else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
			AND summary.PRODUCT_TYPE_ID is not null
			 and header.invoice_status != 'D'
		group by summary.INVOICE_HEADER_NO, summary.PRODUCT_TYPE_ID
		having sum(details.FARE) > 0 OR sum(details.ADMIN_FEE) > 0 OR sum(details.PRODUCT_DISCOUNT) > 0
	]]>
</sql-query>


<sql-query name="revenueProductTypePrepaidInfos">
	<return-scalar column="PRODUCT_TYPE_ID" type="string"/>
	<return-scalar column="deferred_income" type="string"/>
	<return-scalar column="cashplus" type="string"/>
	<return-scalar column="issuance_fee" type="string"/>
	<return-scalar column="issuance_fee_discount" type="string"/>
	<return-scalar column="topup_fee" type="string"/>
	<return-scalar column="topup_fee_discount" type="string"/>
	<![CDATA[
	  select 
			summary.INVOICE_HEADER_NO, 
			summary.PRODUCT_TYPE_ID,
      nvl(sum(case when summary.summary_type in ('P_ISVL', 'P_TUVL') then summary.new_txn end),0) as deferred_income,
      nvl(sum(case when summary.summary_type in ('P_ISCP', 'P_TUCP') then summary.new_txn end),0) as cashplus,
      nvl(sum(case when summary.summary_type in ('P_IF') then summary.new_txn end),0) as issuance_fee,
      nvl(sum(case when summary.summary_type in ('P_IFW') then summary.new_txn end),0) as issuance_fee_discount,
      nvl(sum(case when summary.summary_type in ('P_TF') then summary.new_txn end),0) as topup_fee,
      nvl(sum(case when summary.summary_type in ('P_TFW') then summary.new_txn end),0) as topup_fee_discount
		from BMTB_INVOICE_SUMMARY summary
		inner join bmtb_invoice_header header on summary.invoice_header_no = header.invoice_header_no
		where
			summary.INVOICE_HEADER_NO = :invoiceHeaderNo 
			AND ((:invoiceStart is null and :invoiceEnd is null)or(header.INVOICE_DATE between case when :invoiceStart is null then to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :invoiceEnd is null then last_day(to_date(:invoiceStart, 'yyyy-mm-dd hh24:mi:ss')) else to_date(:invoiceEnd, 'yyyy-mm-dd hh24:mi:ss') end))
			AND summary.PRODUCT_TYPE_ID is not null
			 and header.invoice_status != 'D'
		group by summary.INVOICE_HEADER_NO, summary.PRODUCT_TYPE_ID
	]]>
</sql-query>

</hibernate-mapping>