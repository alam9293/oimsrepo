<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="revenueByProductCardType">
	<return-scalar column="type" 			type="string"/>
	<return-scalar column="name" 			type="string"/>
	<return-scalar column="entity_code"		type="string"/>
	<return-scalar column="master_code"		type="string"/>
	<return-scalar column="txn_count"		type="string"/>
	<return-scalar column="txn_amt"			type="string"/>
	<return-scalar column="admin"			type="string"/>
	<return-scalar column="gst"				type="string"/>
	<return-scalar column="premium"			type="string"/>
	<return-scalar column="premiumgst"		type="string"/>
	<return-scalar column="total"			type="string"/>
	<![CDATA[
select 'NCC' as type, NAME, ENTITY_CODE, MASTER_CODE,
    trim(to_char(sum(txn_count), '999,999,990')) as txn_count,
    trim(to_char(sum(txn_amt), '999,999,990.00')) as txn_amt,
    trim(to_char(sum(ADMIN), '999,999,990.00')) as ADMIN,
    trim(to_char(sum(GST), '999,999,990.00')) as GST,
    trim(to_char(sum(PREMIUM), '999,999,990.00')) as PREMIUM,
    trim(to_char(sum(PREMIUMGST), '999,999,990.00')) as PREMIUMGST,
    trim(to_char(sum(TOTAL), '999,999,990.00')) as TOTAL
    from (
    select 
	product_type.name as NAME,
    entity.ENTITY_CODE, 
    case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end as MASTER_CODE,
    count(txn.ACQUIRE_TXN_NO) as txn_count,
	sum(txn.FARE_AMT) as txn_amt,
	sum(txn.ADMIN_FEE_VALUE - txn.PROD_DIS_VALUE - txn.PROMO_DIS_VALUE) as ADMIN,
	sum(txn.GST_VALUE) as GST,
	0 as PREMIUM,
	0 as PREMIUMGST,
	sum(txn.fare_amt + txn.GST_VALUE + txn.ADMIN_FEE_VALUE - txn.PROD_DIS_VALUE - txn.PROMO_DIS_VALUE) as TOTAL
    from TMTB_ACQUIRE_TXN txn
    inner join BMTB_INVOICE_TXN invoice_txn on txn.ACQUIRE_TXN_NO = invoice_txn.ACQUIRE_TXN_NO
    inner join BMTB_INVOICE_DETAIL invoice_detail on invoice_txn.INVOICE_DETAIL_NO = invoice_detail.INVOICE_DETAIL_NO
    inner join BMTB_INVOICE_SUMMARY invoice_summary on invoice_detail.INVOICE_SUMMARY_NO = invoice_summary.INVOICE_SUMMARY_NO
    inner join BMTB_INVOICE_HEADER invoice_header on invoice_summary.INVOICE_HEADER_NO = invoice_header.INVOICE_HEADER_NO
    inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
    inner join AMTB_ACCOUNT acct on acct.ACCOUNT_NO = txn.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
    inner join FMTB_ENTITY_MASTER entity on ar.ENTITY_NO = entity.ENTITY_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    left outer join (select master_no, interface_mapping_value, case when (substr(INTERFACE_MAPPING_VALUE,1,4)) = 'FLAT' then 'FLAT' else 'NO' end as flatvalue from MSTB_MASTER_TABLE where master_type = 'VTT')  triptype on txn.trip_type = triptype.master_no
    where ((:revenueStart is null and :revenueEnd is null)or(invoice_header.INVOICE_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:productType is null or product_type.PRODUCT_TYPE_ID = :productType)
    group by provider.MASTER_CODE, product_type.NAME, entity.ENTITY_CODE
	,  case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end
UNION
select 
product_type.name as NAME,
 entity.ENTITY_CODE, 
  case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end as MASTER_CODE,
    sum(-1) as txn_count,
    sum(case when note.NOTE_TYPE = 'C' then -note.NOTE_AMOUNT else nvl(note.NOTE_AMOUNT, 0) end) as txn_amt,
    sum(case when note.NOTE_TYPE = 'C' then nvl(note.PROD_DIS + note.DISCOUNT - note.ADMIN_FEE, 0) else nvl(note.ADMIN_FEE - note.PROD_DIS - note.DISCOUNT, 0) end) as ADMIN,
    sum(case when note.NOTE_TYPE = 'C' then nvl(-note.GST, 0) else nvl(note.GST, 0) end) as GST, 
    0 as PREMIUM,
    0 as PREMIUMGST,
    sum(case when note.NOTE_TYPE = 'C' then nvl(note.DISCOUNT - note.NOTE_AMOUNT - note.ADMIN_FEE + note.PROD_DIS - note.GST, 0) else nvl(note.NOTE_AMOUNT - note.DISCOUNT + note.ADMIN_FEE - note.PROD_DIS + note.GST, 0) end) as TOTAL
    from BMTB_NOTE note
    inner join BMTB_INVOICE_TXN note_txn on note.BILLED_INVOICE_TXN_NO = note_txn.INVOICE_TXN_NO
    inner join BMTB_INVOICE_DETAIL note_detail on note_txn.INVOICE_DETAIL_NO = note_detail.INVOICE_DETAIL_NO
    inner join BMTB_INVOICE_SUMMARY note_summary on note_detail.INVOICE_SUMMARY_NO = note_summary.INVOICE_SUMMARY_NO
    inner join BMTB_INVOICE_HEADER note_header on note_summary.INVOICE_HEADER_NO = note_header.INVOICE_HEADER_NO
    inner join BMTB_INVOICE_TXN issue_txn on note.ISSUED_INVOICE_TXN_NO = issue_txn.INVOICE_TXN_NO
    inner join TMTB_ACQUIRE_TXN txn on issue_txn.ACQUIRE_TXN_NO = txn.ACQUIRE_TXN_NO
    inner join AMTB_ACCOUNT acct on acct.ACCOUNT_NO = txn.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
    inner join FMTB_ENTITY_MASTER entity on ar.ENTITY_NO = entity.ENTITY_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
    left outer join (select master_no, interface_mapping_value, case when (substr(INTERFACE_MAPPING_VALUE,1,4)) = 'FLAT' then 'FLAT' else 'NO' end as flatvalue from MSTB_MASTER_TABLE where master_type = 'VTT')  triptype on txn.trip_type = triptype.master_no
    where ((:revenueStart is null and :revenueEnd is null)or(note_header.INVOICE_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:productType is null or product_type.PRODUCT_TYPE_ID = :productType)
    group by provider.MASTER_CODE, product_type.NAME, entity.ENTITY_CODE
 	, case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end
    ) group by MASTER_CODE, NAME, ENTITY_CODE
UNION
select 'CC' as type, NAME, ENTITY_CODE, MASTER_CODE,
    trim(to_char(sum(txn_count), '999,999,990')) as txn_count,
    trim(to_char(sum(txn_amt), '999,999,990.00')) as txn_amt,
    trim(to_char(sum(ADMIN), '999,999,990.00')) as ADMIN,
    trim(to_char(sum(GST), '999,999,990.00')) as GST,
    trim(to_char(sum(PREMIUM), '999,999,990.00')) as PREMIUM,
    trim(to_char(sum(PREMIUMGST), '999,999,990.00')) as PREMIUMGST,
    trim(to_char(sum(TOTAL), '999,999,990.00')) as TOTAL
    from (select 
    pymt_type_master.MASTER_VALUE as NAME,
     entity.ENTITY_CODE, 
    case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end as MASTER_CODE,
    count(txn_no) as txn_count,
    sum(fare_amt) as txn_amt,
    sum(admin_fee) as ADMIN,
    sum(gst) as GST,
    sum(nvl(txn.PREMIUM_AMOUNT, 0) ) as PREMIUM,
    sum(nvl(txn.premium_gst, 0) ) as PREMIUMGST,
    sum(total) as TOTAL
    from TMTB_NON_BILLABLE_TXN txn
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
    inner join TMTB_NON_BILLABLE_BATCH txn_batch on txn.BATCH_ID = txn_batch.BATCH_ID
    left outer join (select master_no, interface_mapping_value, case when (substr(INTERFACE_MAPPING_VALUE,1,4)) = 'FLAT' then 'FLAT' else 'NO' end as flatvalue from MSTB_MASTER_TABLE where master_type = 'VTT')  triptype on txn.product_id = triptype.interface_mapping_value
 	where ((:revenueStart is null and :revenueEnd is null)or(txn_batch.SETTLEMENT_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:paymentType is null or pymt_type_master.MASTER_CODE = :paymentType)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
    group by pymt_type_master.MASTER_VALUE, provider.MASTER_CODE, entity.ENTITY_CODE
	, case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end
UNION
select 
pymt_type_master.MASTER_VALUE as NAME,
entity.ENTITY_CODE, 
 case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end as MASTER_CODE,
 	sum(case when txn.STATUS = 'R' then -1 when txn.STATUS = 'B' then case when txn.CHARGEBACK_REFUND_FARE_AMT = txn.FARE_AMT then -1 else 0 end else 0 end) as txn_count,
    sum(case when txn.STATUS = 'R' then -txn.FARE_AMT when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_FARE_AMT else 0 end) as txn_amt,
    sum(case when txn.STATUS = 'R' then -txn.ADMIN_FEE when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_ADMIN_FEE else 0 end) as ADMIN,
    sum(case when txn.STATUS = 'R' then -txn.GST when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_GST else 0 end) as GST,
    sum(case when txn.STATUS = 'R' then - nvl(txn.PREMIUM_AMOUNT,0) when txn.STATUS = 'B' then -nvl(txn.PREMIUM_AMOUNT,0) else 0 end) as PREMIUM,
    sum(case when txn.STATUS = 'R' then -nvl(txn.PREMIUM_GST,0) when txn.STATUS = 'B' then - nvl(txn.PREMIUM_GST,0) else 0 end) as PREMIUMGST,
    sum(case when txn.STATUS = 'R' then -txn.TOTAL when txn.STATUS = 'B' then -(txn.CHARGEBACK_REFUND_FARE_AMT + txn.CHARGEBACK_REFUND_ADMIN_FEE + txn.CHARGEBACK_REFUND_GST + nvl(txn.PREMIUM_AMOUNT,0) + nvl(txn.PREMIUM_GST,0) ) else 0 end) as TOTAL
    from TMTB_NON_BILLABLE_TXN txn
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
    inner join TMTB_NON_BILLABLE_BATCH txn_batch on txn.BATCH_ID = txn_batch.BATCH_ID
    inner join (select PAYMENT_NO, BATCH_ID from BMTB_BANK_PAYMENT_DETAIL group by payment_no, batch_id) pymt_detail on txn_batch.BATCH_ID = pymt_detail.BATCH_ID
    inner join BMTB_BANK_PAYMENT pymt on pymt_detail.PAYMENT_NO = pymt.PAYMENT_NO
    left outer join (select master_no, interface_mapping_value, case when (substr(INTERFACE_MAPPING_VALUE,1,4)) = 'FLAT' then 'FLAT' else 'NO' end as flatvalue from MSTB_MASTER_TABLE where master_type = 'VTT')  triptype on txn.product_id = triptype.interface_mapping_value
 	where ((:revenueStart is null and :revenueEnd is null)or(case when txn.STATUS = 'B' then txn.CHARGEBACK_REFUND_DATE when txn.STATUS = 'R' then pymt.CREDIT_DATE else null end between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:paymentType is null or pymt_type_master.MASTER_CODE = :paymentType)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
    group by pymt_type_master.MASTER_VALUE, provider.MASTER_CODE, entity.ENTITY_CODE
 , case when triptype.flatvalue = 'FLAT' then provider.MASTER_CODE || ' (Flat Fare)' else provider.MASTER_CODE || ' (Non Flat Fare)'  end
) group by MASTER_CODE, NAME, ENTITY_CODE
	]]>
</sql-query>

<sql-query name="revenueByProductCardType2">
	<return-scalar column="type" 			type="string"/>
	<return-scalar column="name" 			type="string"/>
	<return-scalar column="entity_code"		type="string"/>
	<return-scalar column="master_code"		type="string"/>
	<return-scalar column="txn_count"		type="string"/>
	<return-scalar column="txn_amt"			type="string"/>
	<return-scalar column="admin"			type="string"/>
	<return-scalar column="gst"				type="string"/>
	<return-scalar column="premium"			type="string"/>
	<return-scalar column="premiumgst"		type="string"/>
	<return-scalar column="total"			type="string"/>
	<![CDATA[
select 'NCC' as type, NAME, ENTITY_CODE, MASTER_CODE,
    trim(to_char(sum(txn_count), '999,999,990')) as txn_count,
    trim(to_char(sum(txn_amt), '999,999,990.00')) as txn_amt,
    trim(to_char(sum(ADMIN), '999,999,990.00')) as ADMIN,
    trim(to_char(sum(GST), '999,999,990.00')) as GST,
    trim(to_char(sum(PREMIUM), '999,999,990.00')) as PREMIUM,
    trim(to_char(sum(PREMIUMGST), '999,999,990.00')) as PREMIUMGST,
    trim(to_char(sum(TOTAL), '999,999,990.00')) as TOTAL
    from (
    select 
	product_type.name as NAME,
    entity.ENTITY_CODE || ' (Total)' as ENTITY_CODE, 
     provider.MASTER_CODE || ' (Total)' as MASTER_CODE,
	count(txn.ACQUIRE_TXN_NO) as txn_count,
	sum(txn.FARE_AMT) as txn_amt,
	sum(txn.ADMIN_FEE_VALUE - txn.PROD_DIS_VALUE - txn.PROMO_DIS_VALUE) as ADMIN,
	sum(txn.GST_VALUE) as GST,
	0 as PREMIUM,
	0 as PREMIUMGST,
	sum(txn.fare_amt + txn.GST_VALUE + txn.ADMIN_FEE_VALUE - txn.PROD_DIS_VALUE - txn.PROMO_DIS_VALUE) as TOTAL
    from TMTB_ACQUIRE_TXN txn
    inner join BMTB_INVOICE_TXN invoice_txn on txn.ACQUIRE_TXN_NO = invoice_txn.ACQUIRE_TXN_NO
    inner join BMTB_INVOICE_DETAIL invoice_detail on invoice_txn.INVOICE_DETAIL_NO = invoice_detail.INVOICE_DETAIL_NO
    inner join BMTB_INVOICE_SUMMARY invoice_summary on invoice_detail.INVOICE_SUMMARY_NO = invoice_summary.INVOICE_SUMMARY_NO
    inner join BMTB_INVOICE_HEADER invoice_header on invoice_summary.INVOICE_HEADER_NO = invoice_header.INVOICE_HEADER_NO
    inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
    inner join AMTB_ACCOUNT acct on acct.ACCOUNT_NO = txn.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
    inner join FMTB_ENTITY_MASTER entity on ar.ENTITY_NO = entity.ENTITY_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
  	where ((:revenueStart is null and :revenueEnd is null)or(invoice_header.INVOICE_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:productType is null or product_type.PRODUCT_TYPE_ID = :productType)
    group by provider.MASTER_CODE, product_type.NAME, entity.ENTITY_CODE
union
select 
product_type.name as NAME,
  entity.ENTITY_CODE || ' (Total)' as ENTITY_CODE, 
  provider.MASTER_CODE || ' (Total)' as MASTER_CODE,
    sum(-1) as txn_count,
    sum(case when note.NOTE_TYPE = 'C' then -note.NOTE_AMOUNT else nvl(note.NOTE_AMOUNT, 0) end) as txn_amt,
    sum(case when note.NOTE_TYPE = 'C' then nvl(note.PROD_DIS + note.DISCOUNT - note.ADMIN_FEE, 0) else nvl(note.ADMIN_FEE - note.PROD_DIS - note.DISCOUNT, 0) end) as ADMIN,
    sum(case when note.NOTE_TYPE = 'C' then nvl(-note.GST, 0) else nvl(note.GST, 0) end) as GST,
    0 as PREMIUM,
    0 as PREMIUMGST,
    sum(case when note.NOTE_TYPE = 'C' then nvl(note.DISCOUNT - note.NOTE_AMOUNT - note.ADMIN_FEE + note.PROD_DIS - note.GST, 0) else nvl(note.NOTE_AMOUNT - note.DISCOUNT + note.ADMIN_FEE - note.PROD_DIS + note.GST, 0) end) as TOTAL
    from BMTB_NOTE note
    inner join BMTB_INVOICE_TXN note_txn on note.BILLED_INVOICE_TXN_NO = note_txn.INVOICE_TXN_NO
    inner join BMTB_INVOICE_DETAIL note_detail on note_txn.INVOICE_DETAIL_NO = note_detail.INVOICE_DETAIL_NO
    inner join BMTB_INVOICE_SUMMARY note_summary on note_detail.INVOICE_SUMMARY_NO = note_summary.INVOICE_SUMMARY_NO
    inner join BMTB_INVOICE_HEADER note_header on note_summary.INVOICE_HEADER_NO = note_header.INVOICE_HEADER_NO
    inner join BMTB_INVOICE_TXN issue_txn on note.ISSUED_INVOICE_TXN_NO = issue_txn.INVOICE_TXN_NO
    inner join TMTB_ACQUIRE_TXN txn on issue_txn.ACQUIRE_TXN_NO = txn.ACQUIRE_TXN_NO
    inner join AMTB_ACCOUNT acct on acct.ACCOUNT_NO = txn.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
    inner join FMTB_AR_CONT_CODE_MASTER ar on ar.AR_CONTROL_CODE_NO = case when acct.CUST_NO is not null then acct.AR_CONTROL_CODE_NO when parent.CUST_NO is not null then parent.AR_CONTROL_CODE_NO else grand.AR_CONTROL_CODE_NO end
    inner join FMTB_ENTITY_MASTER entity on ar.ENTITY_NO = entity.ENTITY_NO
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join PMTB_PRODUCT_TYPE product_type on txn.PRODUCT_TYPE_ID = product_type.PRODUCT_TYPE_ID
 	where ((:revenueStart is null and :revenueEnd is null)or(note_header.INVOICE_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:productType is null or product_type.PRODUCT_TYPE_ID = :productType)
    group by provider.MASTER_CODE, product_type.NAME, entity.ENTITY_CODE
    ) group by MASTER_CODE, NAME, ENTITY_CODE
union
select 'CC' as type, NAME, ENTITY_CODE, MASTER_CODE,
    trim(to_char(sum(txn_count), '999,999,990')) as txn_count,
    trim(to_char(sum(txn_amt), '999,999,990.00')) as txn_amt,
    trim(to_char(sum(ADMIN), '999,999,990.00')) as ADMIN,
    trim(to_char(sum(GST), '999,999,990.00')) as GST,
    trim(to_char(sum(PREMIUM), '999,999,990.00')) as PREMIUM,
    trim(to_char(sum(PREMIUMGST), '999,999,990.00')) as PREMIUMGST,
    trim(to_char(sum(TOTAL), '999,999,990.00')) as TOTAL
    from (select 
   pymt_type_master.MASTER_VALUE as NAME,
     entity.ENTITY_CODE || ' (Total)' as ENTITY_CODE, 
	provider.MASTER_CODE || ' (Total)' as MASTER_CODE,
    count(txn_no) as txn_count,
    sum(fare_amt) as txn_amt,
    sum(admin_fee) as ADMIN,
    sum(gst) as GST,
    sum(nvl(txn.PREMIUM_AMOUNT, 0) ) as PREMIUM,
    sum(nvl(txn.premium_gst, 0) ) as PREMIUMGST,
    sum(total) as TOTAL
    from TMTB_NON_BILLABLE_TXN txn
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
    inner join TMTB_NON_BILLABLE_BATCH txn_batch on txn.BATCH_ID = txn_batch.BATCH_ID
 	where ((:revenueStart is null and :revenueEnd is null)or(txn_batch.SETTLEMENT_DATE between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:paymentType is null or pymt_type_master.MASTER_CODE = :paymentType)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
        group by pymt_type_master.MASTER_VALUE, provider.MASTER_CODE, entity.ENTITY_CODE
	union
select 
pymt_type_master.MASTER_VALUE as NAME,
 entity.ENTITY_CODE || ' (Total)' as ENTITY_CODE, 
provider.MASTER_CODE || ' (Total)' as MASTER_CODE,
    sum(case when txn.STATUS = 'R' then -1 when txn.STATUS = 'B' then case when txn.CHARGEBACK_REFUND_FARE_AMT = txn.FARE_AMT then -1 else 0 end else 0 end) as txn_count,
    sum(case when txn.STATUS = 'R' then -txn.FARE_AMT when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_FARE_AMT else 0 end) as txn_amt,
    sum(case when txn.STATUS = 'R' then -txn.ADMIN_FEE when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_ADMIN_FEE else 0 end) as ADMIN,
    sum(case when txn.STATUS = 'R' then -txn.GST when txn.STATUS = 'B' then -txn.CHARGEBACK_REFUND_GST else 0 end) as GST,
    sum(case when txn.STATUS = 'R' then - nvl(txn.PREMIUM_AMOUNT,0) when txn.STATUS = 'B' then -nvl(txn.PREMIUM_AMOUNT,0) else 0 end) as PREMIUM,
    sum(case when txn.STATUS = 'R' then -nvl(txn.PREMIUM_GST,0) when txn.STATUS = 'B' then -nvl(txn.PREMIUM_GST,0) else 0 end) as PREMIUMGST,
    sum(case when txn.STATUS = 'R' then -txn.TOTAL when txn.STATUS = 'B' then -(txn.CHARGEBACK_REFUND_FARE_AMT + txn.CHARGEBACK_REFUND_ADMIN_FEE + txn.CHARGEBACK_REFUND_GST + nvl(txn.PREMIUM_AMOUNT,0) + nvl(txn.PREMIUM_GST,0) ) else 0 end) as TOTAL
    from TMTB_NON_BILLABLE_TXN txn
    inner join MSTB_MASTER_TABLE provider on txn.SERVICE_PROVIDER = provider.MASTER_NO
    inner join MSTB_ACQUIRER_PYMT_TYPE pymt_type on txn.PYMT_TYPE_NO = pymt_type.PYMT_TYPE_NO
    inner join FMTB_NON_BILLABLE_MASTER non_master on non_master.SERVICE_PROVIDER = txn.SERVICE_PROVIDER and non_master.PYMT_TYPE_MASTER_NO = pymt_type.MASTER_NO
    inner join (select MASTER_NO, max(EFFECTIVE_DATE) as EFFECTIVE_DATE from FMTB_NON_BILLABLE_DETAIL where EFFECTIVE_DATE < current_date group by MASTER_NO) last_non_detail on non_master.MASTER_NO = last_non_detail.MASTER_NO
    inner join FMTB_NON_BILLABLE_DETAIL non_detail on last_non_detail.MASTER_NO = non_detail.MASTER_NO and last_non_detail.EFFECTIVE_DATE = non_detail.EFFECTIVE_DATE
    inner join FMTB_AR_CONT_CODE_MASTER ar on non_detail.AR_CONTROL_CODE_NO = ar.AR_CONTROL_CODE_NO
    inner join FMTB_ENTITY_MASTER entity on entity.ENTITY_NO = ar.ENTITY_NO
    inner join MSTB_MASTER_TABLE pymt_type_master on pymt_type.MASTER_NO = pymt_type_master.MASTER_NO
    inner join TMTB_NON_BILLABLE_BATCH txn_batch on txn.BATCH_ID = txn_batch.BATCH_ID
    inner join (select PAYMENT_NO, BATCH_ID from BMTB_BANK_PAYMENT_DETAIL group by payment_no, batch_id) pymt_detail on txn_batch.BATCH_ID = pymt_detail.BATCH_ID
    inner join BMTB_BANK_PAYMENT pymt on pymt_detail.PAYMENT_NO = pymt.PAYMENT_NO
 	where ((:revenueStart is null and :revenueEnd is null)or(case when txn.STATUS = 'B' then txn.CHARGEBACK_REFUND_DATE when txn.STATUS = 'R' then pymt.CREDIT_DATE else null end between case when :revenueStart is null then to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :revenueEnd is null then to_date(:revenueStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:revenueEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:entity is null or entity.ENTITY_NO = :entity)
    and (:provider is null or provider.MASTER_CODE = :provider)
    and (:paymentType is null or pymt_type_master.MASTER_CODE = :paymentType)
    and (txn.MATCHING_STATUS is NULL or txn.MATCHING_STATUS != 'T')
    group by pymt_type_master.MASTER_VALUE, provider.MASTER_CODE, entity.ENTITY_CODE
) group by MASTER_CODE, NAME, ENTITY_CODE
	]]>
</sql-query>
</hibernate-mapping>