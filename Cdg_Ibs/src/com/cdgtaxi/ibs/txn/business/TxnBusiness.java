package com.cdgtaxi.ibs.txn.business;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;

import com.cdgtaxi.ibs.common.business.GenericBusiness;
import com.cdgtaxi.ibs.common.model.AmtbAccount;
import com.cdgtaxi.ibs.common.model.AmtbAcctMainContact;
import com.cdgtaxi.ibs.common.model.IttbTripsTxn;
import com.cdgtaxi.ibs.common.model.IttbTripsTxnReq;
import com.cdgtaxi.ibs.common.model.PmtbProduct;
import com.cdgtaxi.ibs.common.model.PmtbProductRetag;
import com.cdgtaxi.ibs.common.model.PmtbProductStatus;
import com.cdgtaxi.ibs.common.model.PmtbProductType;
import com.cdgtaxi.ibs.common.model.TmtbAcquireTxn;
import com.cdgtaxi.ibs.common.model.TmtbTxnReviewReq;
import com.cdgtaxi.ibs.common.model.TmtbTxnReviewReqFlow;
import com.cdgtaxi.ibs.common.model.VwIntfSetlForIb;
import com.cdgtaxi.ibs.common.model.VwIntfTripsForIb;
import com.cdgtaxi.ibs.txn.ui.TxnSearchCriteria;

public interface TxnBusiness  extends GenericBusiness{
	public Map<String, String> getAllProductTypes();
	public Map<String, String> getPremierProductTypes();
	public Map<String, String> getExternalProductTypes();
	public Map<String, String> getEntityMaster();
	public AmtbAccount getAccount(String cardNo, Timestamp startDt);
	public AmtbAcctMainContact getMainBillingContact(AmtbAccount amtbAccount);
	public PmtbProduct getProduct(PmtbProduct pmtbProduct);
	public PmtbProduct getProduct(String cardNo);
	public PmtbProductRetag getRetagProductsByDate(BigDecimal productId, Timestamp ts);
	public PmtbProductStatus getEarliestProductIssuedStatus(String cardNo);
	public List<AmtbAccount> searchPremierAccounts(String custNo, String acctName);
	public List<PmtbProductType> searchPremierAccountsProductTypes(String custNo, String acctNo);
	public Boolean searchPremierAccountsGotProductType(String custNo, String productTypeId);
	public List<AmtbAccount> searchPremierAccounts(AmtbAccount amtbAccount);
	public List<AmtbAccount> searchExternalAccounts(String custNo, String acctName, String productTypeId);
	public List<AmtbAccount> searchExternalAccounts(AmtbAccount amtbAccount, String productTypeId);
	public List<AmtbAccount> searchAccounts(String custNo, String acctName);
	public List<AmtbAccount> searchAccounts(AmtbAccount amtbAccount);
	public List<AmtbAccount> searchAccounts(String productTypeId, AmtbAccount amtbAccount);
	public String createTxn(Map<String, String> txnDetails, String user)  throws Exception;
	public String createPremierTxn(Map<String, String> txnDetails, String user) throws Exception;
	public String createExternalTxn(Map<String, String> txnDetails, String user) throws Exception;
	public PmtbProductType getProductType(String cardNo, java.util.Date tripDt);
	public List<TmtbTxnReviewReq> searchRemark(String jobNo, Integer txnNo, String txnType);
	public List<TmtbAcquireTxn> searchTxns(TxnSearchCriteria txnSearchCriteria);
	public TmtbAcquireTxn searchTxn(String txnID);
	public boolean updateTxn(Map<String, String> txnDetails, TmtbAcquireTxn oldAcquireTxn) throws Exception;
	public boolean updateTxn(TmtbAcquireTxn newAcquireTxn, TmtbAcquireTxn oldAcquireTxn, TmtbTxnReviewReq tmtbTxnReviewReq, String remarks, String user) throws Exception;
	public boolean updateRejTxn(TmtbAcquireTxn oldAcquireTxn, TmtbTxnReviewReq tmtbTxnReviewReq,
			String remarks, String user) throws Exception;
	public List<TmtbTxnReviewReq> searchTxnReqs();
	public TmtbTxnReviewReq getTxnReq(String txnReqID);
	public boolean updateTxnReqStatus(TmtbAcquireTxn oldAcquireTxn, TmtbTxnReviewReq tmtbTxnReviewReq,
			String remarks) throws Exception;
	public boolean updateTxns(List<Integer> requestIds, String remarks, String user, String status) throws Exception;
	public boolean updateTxn(TmtbAcquireTxn oldAcquireTxn, TmtbTxnReviewReq tmtbTxnReviewReq, String remarks, String user, String status) throws Exception;
	public boolean isAccountClosed(String acctNo);
	public boolean isRequestCreated(String txnID);
	public boolean hasDuplicateDraftNo(String salesDraftNo);
	public void createTxnForInterface(IttbTripsTxn ittbTripsTxn, TmtbAcquireTxn tmtbAcquireTxn) throws Exception;
	public List<VwIntfTripsForIb> searchTRIPSview(int records);
	public List<IttbTripsTxn> searchTxnView(int records);
	public void started(int retrievalPK) throws Exception;
	public void ended(int retrievalPK) throws Exception;
	public String sendTRIPSReq(List<IttbTripsTxn> requestList, int[] stats) throws Exception;
	public int retrieveFromTRIPS(List<VwIntfTripsForIb> requestList, int[] stats) throws Exception;
	public String verifyFMSDriverVehicleAssoc(String taxiNo, String nric, Timestamp tripStart, Timestamp tripEnd);
	public List<IttbTripsTxnReq> getTripsReqs();
	public List<VwIntfSetlForIb> searchSETLview(int records);
	public int retrieveFromSETL(List<VwIntfSetlForIb> setlList, int[] stats) throws Exception;
	public TmtbAcquireTxn getLatestTxnByJobNo(String jobNo);
	public List<TmtbTxnReviewReq> getTxnReqs(String txnID);
	public boolean hasActiveOrBilledTripByJobNo(String jobNo);
	public String getNote(int tmtbAcquireTxnNo);
	public List<TmtbTxnReviewReqFlow> getTxnReqFlows(String txnReqID);
	public List<Object[]> getPreviousApproval(String jobNo);
	public void createBatchTripUpload(Map<String, String> txnDetails, String user, String cardlessYesNo) throws Exception;
	public boolean checkJobNo(String jobNo);
}
