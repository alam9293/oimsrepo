<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="inventoryMovementReportDetailed">
	<return-scalar column="stock_in_date" 		type="string"/>
	<return-scalar column="stock_issue_date" 	type="string"/>
	<return-scalar column="taxi_voucher_expiry_date" type="string"/>
	<return-scalar column="acct_no"				type="string"/>
	<return-scalar column="acct_name"			type="string"/>
	<return-scalar column="invoice_no"			type="string"/>
	<return-scalar column="invoice_date"		type="string"/>
	<return-scalar column="type_name"			type="string"/>
	<return-scalar column="voucher_no"			type="string"/>
	<return-scalar column="price"				type="string"/>
	<return-scalar column="stock_in"			type="string"/>
	<return-scalar column="stock_in_amt"		type="string"/>
	<return-scalar column="stock_issue"			type="string"/>
	<return-scalar column="stock_issue_amt"		type="string"/>
	<return-scalar column="handling_fee"		type="string"/>
	<return-scalar column="delivery_charges"	type="string"/>
	<return-scalar column="discount"			type="string"/>
	<return-scalar column="request_no"			type="string"/>
	<return-scalar column="requestor_issue_by"	type="string"/>
	<return-scalar column="requestor_remarks"	type="string"/>
	<![CDATA[
select
	to_char(case when stock.TXN_TYPE = 'I' then stock.TXN_DT else stock_in.TXN_DT end, 'dd/mm/yyyy') as stock_in_date,
    to_char(issue_req.REQUEST_DT, 'dd/mm/yyyy') as stock_issue_date,
    case when acct.CUST_NO is not null then acct.CUST_NO when parent.CUST_NO is not null then parent.CUST_NO else grand.CUST_NO end as acct_no,
    case when acct.CUST_NO is not null then acct.ACCOUNT_NAME when parent.CUST_NO is not null then parent.ACCOUNT_NAME else grand.ACCOUNT_NAME end as acct_name,
    item_type.TYPE_NAME, stock.SERIAL_NO_START || ' - ' || stock.SERIAL_NO_END as voucher_no,
    trim(to_char(item_type.PRICE, '999,999,990.00')) as PRICE,
    trim(to_char(balance.OPENING_BALANCE, '999,999,990')) as OPENING_BALANCE,
    trim(to_char(balance.OPENING_BALANCE * item_type.PRICE, '999,999,990.00')) as opening_amt,
    trim(to_char(case when stock.TXN_TYPE = 'I' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 when stock.TXN_TYPE = 'S' then 0 end, '999,999,990')) as stock_in,
    trim(to_char(case when stock.TXN_TYPE = 'I' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 when stock.TXN_TYPE = 'S' then 0 end * item_type.PRICE, '999,999,990.00')) as stock_in_amt,
    trim(to_char(case when stock.TXN_TYPE = 'I' then 0 when stock.TXN_TYPE = 'S' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 end, '999,999,990')) as stock_issue,
    trim(to_char(case when stock.TXN_TYPE = 'I' then 0 when stock.TXN_TYPE = 'S' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 end * item_type.PRICE, '999,999,990.00')) as stock_issue_amt,
    trim(to_char(balance.OPENING_BALANCE + case when stock.TXN_TYPE = 'I' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 when stock.TXN_TYPE = 'S' then 0 end - case when stock.TXN_TYPE = 'I' then 0 when stock.TXN_TYPE = 'S' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 end, '999,999,990')) as stock_balance,
    trim(to_char((balance.OPENING_BALANCE + case when stock.TXN_TYPE = 'I' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 when stock.TXN_TYPE = 'S' then 0 end - case when stock.TXN_TYPE = 'I' then 0 when stock.TXN_TYPE = 'S' then stock.SERIAL_NO_END - stock.SERIAL_NO_START + 1 end) * item_type.PRICE, '999,999,990.00')) as stock_balance_amt,
    to_char(issue.expiry_date, 'dd/mm/yyyy') as taxi_voucher_expiry_date,
    bih.invoice_no as invoice_no,
    to_char(bih.invoice_date, 'dd/mm/yyyy') as invoice_date,
    trim(to_char(issue_req.handling_fee, '999,999,990.00')) as handling_fee,
    trim(to_char(issue_req.delivery_charges, '999,999,990.00')) as delivery_charges,
    trim(to_char(issue_req.discount, '999,999,990.00')) as discount,
    issue_req.issue_req_no as request_no, 
    issue_req.create_by as requestor_issue_by,
    issue_req.REQUESTOR_REMARKS as requestor_remarks
    from IMTB_STOCK stock
    inner join IMTB_ITEM_TYPE item_type on stock.ITEM_TYPE_NO = item_type.ITEM_TYPE_NO
    left join IMTB_STOCK stock_in on stock.TXN_TYPE = 'S' and stock_in.TXN_TYPE = 'I' and stock.ITEM_TYPE_NO = stock_in.ITEM_TYPE_NO and stock.SERIAL_NO_START between stock_in.SERIAL_NO_START and stock_in.SERIAL_NO_END
    left join IMTB_ISSUE issue on stock.STOCK_NO = issue.STOCK_NO
    left join IMTB_ISSUE_REQ issue_req on issue.ISSUE_NO = issue_req.ISSUE_REQ_NO
    left join AMTB_ACCOUNT acct on issue_req.ACCOUNT_NO = acct.ACCOUNT_NO
    left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.ACCOUNT_NO
    left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.ACCOUNT_NO
         left join FMTB_AR_CONT_CODE_MASTER ar on ar.ar_control_code_no = CASE WHEN grand.CUST_NO IS NOT NULL THEN grand.ar_control_code_no  WHEN parent.CUST_NO IS NOT NULL THEN parent.ar_control_code_no ELSE acct.ar_control_code_no END
         left join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
    left join (select ITEM_TYPE_NO,
        sum(case when TXN_TYPE = 'I' then (SERIAL_NO_END - SERIAL_NO_START + 1) when TXN_TYPE = 'S' then (SERIAL_NO_START - SERIAL_NO_END - 1) end) as opening_balance
        from IMTB_STOCK
        where :stockStart is null or to_timestamp(:stockStart, 'yyyy-mm-dd hh24:mi:ss') > txn_dt
        group by ITEM_TYPE_NO
    ) balance on balance.ITEM_TYPE_NO = item_type.ITEM_TYPE_NO
    left outer join bmtb_invoice_header bih on bih.imtb_issue_no = issue.issue_no 
    where ((:stockStart is null and :stockEnd is null)or(stock.TXN_DT between case when :stockStart is null then to_date(:stockEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:stockStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :stockEnd is null then to_date(:stockStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:stockEnd, 'yyyy-mm-dd hh24:mi:ss') end)or(issue_req.REQUEST_DT between case when :stockStart is null then to_date('${2. Stock In/Stock Issued End Date#date} 00:00:00', 'yyyy-mm-dd hh24:mi:ss') else to_date(:stockStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :stockEnd is null then to_date(:stockStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:stockEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    and (:itemTypeNo is null or item_type.ITEM_TYPE_NO = :itemTypeNo)
    and (:entityNo is null or entity.entity_no = :entityNo)
    order by case when stock.TXN_TYPE = 'I' then stock.TXN_DT else stock_in.TXN_DT end, issue_req.REQUEST_DT
	]]>
</sql-query>
</hibernate-mapping>