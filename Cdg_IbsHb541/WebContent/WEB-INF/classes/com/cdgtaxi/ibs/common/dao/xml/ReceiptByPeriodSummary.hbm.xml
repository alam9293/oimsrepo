<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
    
<hibernate-mapping>
<!-- 
    Created by the Middlegen Hibernate plugin 2.1

    http://boss.bekk.no/boss/middlegen/
    http://www.hibernate.org/
-->

<sql-query name="receiptByPeriodSummaryDate">
	<return-scalar column="receipt_date" 			type="string"/>
	<return-scalar column="receipt_amount" 			type="string"/>
	<return-scalar column="cancelled_amount"		type="string"/>
	<![CDATA[
  select to_char(payment.RECEIPT_DATE, 'dd/mm/yyyy') as RECEIPT_DATE, trim(to_char(RECEIPT_AMOUNT, '999,999,990.00')) as RECEIPT_AMOUNT, trim(to_char(CANCELLED_AMOUNT, '999,999,990.00')) as CANCELLED_AMOUNT
    from
    (select sum(payment_amount) as RECEIPT_AMOUNT, trunc(RECEIPT_DT, 'J') as RECEIPT_DATE
        from bmtb_payment_receipt payment
        inner join mstb_master_table master on  master.master_no = payment.payment_mode
		left join AMTB_ACCOUNT acct on payment.account_no = acct.account_no
		left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.account_no
		left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.account_no
		inner join AMTB_ACCOUNT top on (case when grand.cust_no is not null then grand.account_no when parent.cust_no is not null then parent.account_no else acct.account_no end) = top.account_no
		inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
		inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
		left join AMTB_ACCT_SALESPERSON acct_sales on acct_sales.ACCOUNT_NO = payment.account_no
		and payment.RECEIPT_DT between acct_sales.EFFECTIVE_DT_FROM 
		and (case when acct_sales.EFFECTIVE_DT_TO is null then to_date('9999-12-31','yyyy-mm-dd hh24:mi:ss') else acct_sales.EFFECTIVE_DT_TO end)
	where
    master.master_code not like 'MEMO' and (master_code = :paymentMode or :paymentMode is null) and
        ((:receiptStart is null and :receiptEnd is null)or(payment.RECEIPT_DT between case when :receiptStart is null then to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :receiptEnd is null then to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    	and (:entityNo is null or entity.entity_no = :entityNo)
		and(:salespersonNo is null or acct_sales.SALESPERSON_NO = :salespersonNo)
    group by trunc(RECEIPT_DT, 'J')) payment
    left join
    (select sum(payment_amount) as CANCELLED_AMOUNT, trunc(RECEIPT_DT, 'J') as RECEIPT_DATE
        from bmtb_payment_receipt payment
        inner join mstb_master_table master on  master.master_no = payment.payment_mode
		left join AMTB_ACCOUNT acct on payment.account_no = acct.account_no
		left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.account_no
		left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.account_no
		inner join AMTB_ACCOUNT top on (case when grand.cust_no is not null then grand.account_no when parent.cust_no is not null then parent.account_no else acct.account_no end) = top.account_no
		inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
		inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
		left join AMTB_ACCT_SALESPERSON acct_sales on acct_sales.ACCOUNT_NO = payment.account_no
		and payment.RECEIPT_DT between acct_sales.EFFECTIVE_DT_FROM 
		and (case when acct_sales.EFFECTIVE_DT_TO is null then to_date('9999-12-31','yyyy-mm-dd hh24:mi:ss') else acct_sales.EFFECTIVE_DT_TO end)
	where
        master.master_code not like 'MEMO' and CANCEL_DT is not null and (master_code = :paymentMode or :paymentMode is null) and
        ((:receiptStart is null and :receiptEnd is null)or(payment.RECEIPT_DT between case when :receiptStart is null then to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :receiptEnd is null then to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') end))
     and (:entityNo is null or entity.entity_no = :entityNo)
	and(:salespersonNo is null or acct_sales.SALESPERSON_NO = :salespersonNo)
    group by trunc(RECEIPT_DT, 'J')) cancel
    on payment.RECEIPT_DATE = cancel.RECEIPT_DATE
  order by payment.RECEIPT_DATE
	]]>
</sql-query>
<sql-query name="receiptByPeriodSummaryPayment">
	<return-scalar column="master_value" 			type="string"/>
	<return-scalar column="receipt_amount" 			type="string"/>
	<return-scalar column="cancelled_amount"		type="string"/>
	<![CDATA[
select MASTER_VALUE, trim(to_char(RECEIPT_AMOUNT, '999,999,990.00')) as RECEIPT_AMOUNT, trim(to_char(CANCELLED_AMOUNT, '999,999,990.00')) as CANCELLED_AMOUNT
    from
    (select sum(payment_amount) as RECEIPT_AMOUNT, master_code as code
        from bmtb_payment_receipt payment
        inner join mstb_master_table master on  master.master_no = payment.payment_mode
		left join AMTB_ACCOUNT acct on payment.account_no = acct.account_no
		left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.account_no
		left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.account_no
		inner join AMTB_ACCOUNT top on (case when grand.cust_no is not null then grand.account_no when parent.cust_no is not null then parent.account_no else acct.account_no end) = top.account_no
		inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
		inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
		left join AMTB_ACCT_SALESPERSON acct_sales on acct_sales.ACCOUNT_NO = payment.account_no
		and payment.RECEIPT_DT between acct_sales.EFFECTIVE_DT_FROM 
		and (case when acct_sales.EFFECTIVE_DT_TO is null then to_date('9999-12-31','yyyy-mm-dd hh24:mi:ss') else acct_sales.EFFECTIVE_DT_TO end)
	where
         (master_code = :paymentMode or :paymentMode is null) and
        ((:receiptStart is null and :receiptEnd is null)or(payment.RECEIPT_DT between case when :receiptStart is null then to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :receiptEnd is null then to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') end))
    	and (:entityNo is null or entity.entity_no = :entityNo )
	and(:salespersonNo is null or acct_sales.SALESPERSON_NO = :salespersonNo)
    group by master_code) payment
    left join
    (select sum(payment_amount) as CANCELLED_AMOUNT, master_code as code
        from bmtb_payment_receipt payment
        inner join mstb_master_table master on  master.master_no = payment.payment_mode
		left join AMTB_ACCOUNT acct on payment.account_no = acct.account_no
		left join AMTB_ACCOUNT parent on acct.PARENT_NO = parent.account_no
		left join AMTB_ACCOUNT grand on parent.PARENT_NO = grand.account_no
		inner join AMTB_ACCOUNT top on (case when grand.cust_no is not null then grand.account_no when parent.cust_no is not null then parent.account_no else acct.account_no end) = top.account_no
		inner join FMTB_AR_CONT_CODE_MASTER ar on top.ar_control_code_no = ar.ar_control_code_no
		inner join FMTB_ENTITY_MASTER entity on ar.entity_no =entity.entity_no
		left join AMTB_ACCT_SALESPERSON acct_sales on acct_sales.ACCOUNT_NO = payment.account_no
		and payment.RECEIPT_DT between acct_sales.EFFECTIVE_DT_FROM 
		and (case when acct_sales.EFFECTIVE_DT_TO is null then to_date('9999-12-31','yyyy-mm-dd hh24:mi:ss') else acct_sales.EFFECTIVE_DT_TO end)
	where
       CANCEL_DT is not null and (master_code = :paymentMode or :paymentMode is null) and
        ((:receiptStart is null and :receiptEnd is null)or(payment.RECEIPT_DT between case when :receiptStart is null then to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') end and case when :receiptEnd is null then to_date(:receiptStart, 'yyyy-mm-dd hh24:mi:ss') else to_date(:receiptEnd, 'yyyy-mm-dd hh24:mi:ss') end))
   		and (:entityNo is null or entity.entity_no = :entityNo)
	and(:salespersonNo is null or acct_sales.SALESPERSON_NO = :salespersonNo)
    group by master_code) cancel
    on payment.code = cancel.code
    inner join mstb_master_table master on master.master_type = 'PM' and master.master_code = payment.code and master.master_code not like 'MEMO'
    order by payment.code
	]]>
</sql-query>
</hibernate-mapping>